<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: octopress | loop in codes]]></title>
  <link href="http://codemacro.com/tags/octopress/atom.xml" rel="self"/>
  <link href="http://codemacro.com/"/>
  <updated>2012-07-31T09:43:48+08:00</updated>
  <id>http://codemacro.com/</id>
  <author>
    <name><![CDATA[Kevin Lynx]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[为octopress每篇文章添加一个文章信息]]></title>
    <link href="http://codemacro.com/2012/07/26/post-footer-plugin-for-octopress/"/>
    <updated>2012-07-26T14:27:00+08:00</updated>
    <id>http://codemacro.com/2012/07/26/post-footer-plugin-for-octopress</id>
    <content type="html"><![CDATA[<p>当你的博客文章被转载时，你肯定希望转载者能添加一个原始地址。或者你的文章被各种RSS抓取器抓取时，你也希望能在明显的位置显示这个原始地址。使用octopress写博客时，可以通过插件来做这件事。最开始，我只是想单纯地添加这个“原始地址“，一番google未能找到现成的插件，所以只好动手。</p>

<p>话说编写octopress真不是件容易事，因为我实在没找到编写插件的文档。octopress基于jekyll，jekyll又使用了liquid。最后我把这几个项目的文档都翻了下，也仅仅看到几个代码示例，而且liquid的API页面居然出错。无奈之下只好多翻了些现有插件的代码，摸索着来写。写octopress的插件，主要分为generator/tag/filter几种。tag很好理解，就是在文章中插入一个插件注册的tag，然后生成页面时就会调用到对应的插件。filter大概就是把文章内容过滤一遍转换成其他内容输出。</p>

<!-- more -->


<p>后来发现了一篇文章<a href="http://xoyo.name/2012/04/auto-spacing-for-octopress/">&lt;给中英文间加个空格></a>，这人写的插件从流程上大致是我需要的，模仿如下：</p>

<p>{% highlight ruby %}
{% raw %}
#</p>

<h1>post_footer_filter.rb</h1>

<h1>Append every post some footer infomation like original url</h1>

<h1>Kevin Lynx</h1>

<h1>7.26.2012</h1>

<p>#
require './plugins/post_filters'</p>

<p>module AppendFooterFilter
  def append(post)</p>

<pre><code> author = post.site.config['author']
 url = post.site.config['url']
 pre = post.site.config['original_url_pre']
 post.content + %Q[&lt;p class='post-footer'&gt;
        #{pre or "original link:"}
        &lt;a href='#{post.full_url}'&gt;#{post.full_url}&lt;/a&gt;&lt;br/&gt;
        &amp;nbsp;written by &lt;a href='#{url}'&gt;#{author}&lt;/a&gt;
        &amp;nbsp;posted at &lt;a href='#{url}'&gt;#{url}&lt;/a&gt;
        &lt;/p&gt;]
</code></pre>

<p>  end
end</p>

<p>module Jekyll
  class AppendFooter &lt; PostFilter</p>

<pre><code>include AppendFooterFilter
def pre_render(post)
  post.content = append(post) if post.is_post?
end
</code></pre>

<p>  end
end</p>

<p>Liquid::Template.register_filter AppendFooterFilter
{% endraw %}
{% endhighlight %}</p>

<p>大概就是当传入的页面是post时，就添加页脚信息，我这里主要添加了原始地址和作者信息，并且留了个post-footer作为这个段落的样式定制。附加的信息对于RSS输出同样有效。</p>

<p>这个插件的使用方式很简单，直接放到plugins目录下即可。可以在_config.yml中配置下origional_url_pre，例如配置为“原始地址：“。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为octopress添加tag cloud]]></title>
    <link href="http://codemacro.com/2012/07/18/add-tag-to-octopress/"/>
    <updated>2012-07-18T16:37:00+08:00</updated>
    <id>http://codemacro.com/2012/07/18/add-tag-to-octopress</id>
    <content type="html"><![CDATA[<p>同添加category list一样，网络上有很多方法，这里列举一种。首先到<a href="https://github.com/robbyedwards/octopress-tag-pages">https://github.com/robbyedwards/octopress-tag-pages</a>和<a href="https://github.com/robbyedwards/octopress-tag-cloud">https://github.com/robbyedwards/octopress-tag-cloud</a>clone这两个项目的代码。这两个项目分别用于产生tag page和tag cloud。 针对这两个插件，需要手工复制一些文件到你的octopress目录。</p>

<p><strong>octopress-tag-pages</strong></p>

<p>复制tag_generator.rb到/plugins目录；复制tag_index.html到/source/_layouts目录。<strong>需要注意的是，还需要复制tag_feed.xml到/source/_includes/custom/目录。</strong>这个官方文档里没提到，在我机器上rake generate时报错。其他文件就不需要复制了，都是些例子。</p>

<!-- more -->


<p><strong>octopress-tag-cloud</strong></p>

<p>仅复制tag_cloud.rb到/plugins目录即可。但这仅仅只是为liquid添加了一个tag（非本文所提tag）。如果要在侧边导航里添加一个tag cloud，我们还需要手动添加aside。</p>

<p>复制以下代码到/source/_includes/custom/asides/tags.html。</p>

<p>{% highlight ruby %}
{% raw %}
<section>
  <h1>Tags</h1>
  <ul class="tag-cloud"></p>

<pre><code>{% tag_cloud font-size: 90-210%, limit: 10, style: para %}
</code></pre>

<p>  </ul>
</section>
{% endraw %}
{% endhighlight %}</p>

<p>tag_cloud的参数中，style :para指定不使用li来分割，limit限定10个tag，font-size指定tag的大小范围，具体参数参看官方文档。</p>

<p>最后，当然是在_config.xml的default_asides 中添加这个tag cloud到导航栏，例如：</p>

<p>{% highlight ruby %}
default_asides: [asides/category_list.html, asides/recent_posts.html, custom/asides/tags.html]
{% endhighlight %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为octopress添加分类(category)列表]]></title>
    <link href="http://codemacro.com/2012/07/18/add-category-list-to-octopress/"/>
    <updated>2012-07-18T16:10:00+08:00</updated>
    <id>http://codemacro.com/2012/07/18/add-category-list-to-octopress</id>
    <content type="html"><![CDATA[<p>参考<a href="http://paz.am/blog/blog/2012/06/25/octopress-category-list-plugin/">http://paz.am/blog/blog/2012/06/25/octopress-category-list-plugin/</a>。大致步骤为：</p>

<p><strong>增加category_list插件</strong></p>

<p>保存以下代码到plugins/category_list_tag.rb：</p>

<p>{% highlight ruby %}
module Jekyll
  class CategoryListTag &lt; Liquid::Tag</p>

<pre><code>def render(context)
  html = ""
  categories = context.registers[:site].categories.keys
  categories.sort.each do |category|
    posts_in_category = context.registers[:site].categories[category].size
    category_dir = context.registers[:site].config['category_dir']
    category_url = File.join(category_dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase)
    html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='http://codemacro.com/#{category_url}/'&gt;#{category} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n"
  end
  html
end
</code></pre>

<p>  end
end</p>

<p>Liquid::Template.register_tag('category_list', Jekyll::CategoryListTag)
{% endhighlight %}</p>

<p>这个插件会向liquid注册一个名为category_list的tag，该tag就是以li的形式将站点所有的category组织起来。如果要将category加入到侧边导航栏，需要增加一个aside。</p>

<!-- more -->


<p><strong>增加aside</strong></p>

<p>复制以下代码到source/_includes/asides/category_list.html。</p>

<p>{% highlight ruby %}
{% raw %}
<section>
  <h1>Categories</h1>
  <ul id="categories"></p>

<pre><code>{% category_list %}
</code></pre>

<p>  </ul>
</section>
{% endraw %}
{% endhighlight %}</p>

<p>配置侧边栏需要修改_config.yml文件，修改其default_asides项：</p>

<p>{% highlight ruby %}
default_asides: [asides/category_list.html, asides/recent_posts.html]
{% endhighlight %}</p>

<p>以上asides根据自己的需求调整。</p>
]]></content>
  </entry>
  
</feed>

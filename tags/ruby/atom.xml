<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: ruby | loop in codes]]></title>
  <link href="http://codemacro.com/tags/ruby/atom.xml" rel="self"/>
  <link href="http://codemacro.com/"/>
  <updated>2012-09-03T15:25:32+08:00</updated>
  <id>http://codemacro.com/</id>
  <author>
    <name><![CDATA[Kevin Lynx]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby应用几则（解析HTML、XMLRPC）]]></title>
    <link href="http://codemacro.com/2012/08/09/ruby-usage-example/"/>
    <updated>2012-08-09T14:26:00+08:00</updated>
    <id>http://codemacro.com/2012/08/09/ruby-usage-example</id>
    <content type="html"><![CDATA[<h3>Ruby解析HTML</h3>

<p>Ruby解析HTML（或XML）可以使用<a href="http://nokogiri.org/">nokogiri</a>。我的应用里需要查找HTML页面里的某个元素，结果发现实现方式非常简单，就像使用jquery一样。例如我要获取到octopress博客文章里的文章内容、文章标题、文章分类，就像这篇博客：</p>

<p>{% highlight ruby %}
{% raw %}</p>

<h1>get post title and content for an octopress post</h1>

<p>def post_info(url)
  doc = Nokogiri::HTML(open(url))
  content = doc.css('div.entry-content').to_s
  title = doc.css('header h1.entry-title').inner_html
  categories = doc.css('a.category').collect do |link| link.content end
  return title, content, categories
end
{% endraw %}
{% endhighlight %}</p>

<!-- more -->


<p>最关键就是<code>doc.css('div.entry-content')</code>。想起以前用lisp写的那个版本，还手工遍历了整个HTML页面，实在太落后了。上面这个函数的作用就是取得一篇博文的HTML页面，然后返回该博文的内容、标题和分类。</p>

<h3>Ruby调用xml-rpc</h3>

<p>可以使用<code>rails-xmlrpc</code>这个库，直接使用gem安装：<code>gem install rails-xmlrpc</code>。这个库分为客户端和服务器两部分，我的应用是使用metaweblog API：</p>

<p>{% highlight ruby %}
{% raw %}
class MetaWeblogClient &lt; XMLRPC::Client
  def initialize(username, password, host, url)</p>

<pre><code>super(host, url)
@username = username
@password = password
</code></pre>

<p>  end</p>

<p>  def newPost(post, publish)</p>

<pre><code>call("metaWeblog.newPost", "0", "#{@username}", "#{@password}", post, publish)
</code></pre>

<p>  end</p>

<p>  # other methods</p>

<p>end</p>

<p>def new_post(api, url)
  title, content, categories = post_info(url)
  if title.nil? or content.nil?</p>

<pre><code>puts "get post info failed at #{url}\n"
return
</code></pre>

<p>  end
  post = { :title => title, :description => content, :categories => categories }
  api.newPost(post, true)
  puts "new post #{title} in #{categories} done\n"
end</p>

<p>api = MetaweblogClient.new(username, password, host, url)
new_post(api, "http://codemacro.com/2012/08/07/write-standalone-ruby-script/")</p>

<p>{% endraw %}
{% endhighlight %}</p>

<h3>Ruby读取yaml</h3>

<p>就像Rails里那些配置文件一样，都属于yaml配置文件。我的应用里只需使用简单的key-value形式的yaml配置，就像：</p>

<p>{% highlight ruby %}
host: www.cppblog.com
url: /kevinlynx/services/metaweblog.aspx
username: kevinlynx
password: xxxxxx
{% endhighlight %}</p>

<p>解析的时候需要使用<code>yaml</code>库：</p>

<p>{% highlight ruby %}
file = File.open(filename)
cfg = YAML::load(file)
{% endhighlight %}</p>

<p>针对以上配置，<code>YAML::load</code>得到的结果就是一个hash表：</p>

<p>{% highlight ruby %}
{% raw %}
puts cfg["host"]
puts cfg["url"]
{% endraw %}
{% endhighlight %}</p>

<p>以上，我写了一个小工具，可以让我每次在<a href="http://codemacro.com">codemacro.com</a>发表博客后，使用这个工具自动解析生成的文章，然后发表到CPPBLOG上。完整源码可在这个上：<a href="https://gist.github.com/3301662">https://gist.github.com/3301662</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编写独立的Ruby脚本]]></title>
    <link href="http://codemacro.com/2012/08/07/write-standalone-ruby-script/"/>
    <updated>2012-08-07T14:33:00+08:00</updated>
    <id>http://codemacro.com/2012/08/07/write-standalone-ruby-script</id>
    <content type="html"><![CDATA[<p>Ruby肯定不仅仅用于编写Rails程序。要使用Ruby编写独立的脚本/程序，就像shell一样，其方式也很简单：</p>

<p>{% highlight ruby %}</p>

<h1>!/usr/bin/env ruby</h1>

<p>if ARGV.size == 0
  puts 'usage: program arg1 arg2'
  exit
end
ARGV.each do |arg| print arg end
{% endhighlight %}</p>

<p>脚本内容没有什么限制，函数、类、模块的组织方式也随意。ARGV是一个特殊的变量，是一个数组，其内保存了传入脚本的参数，不包含程序名。当然，不要忘记给脚本加上可执行权限。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[『你会把Ruby的哪些特性加入Java』]]></title>
    <link href="http://codemacro.com/2012/08/03/ruby-element-to-java/"/>
    <updated>2012-08-03T14:14:00+08:00</updated>
    <id>http://codemacro.com/2012/08/03/ruby-element-to-java</id>
    <content type="html"><![CDATA[<p>参考（翻译、摘抄）于<a href="http://java.sys-con.com/node/251986">Can Ruby Live without Rails?</a>。这篇文章发表于2006年，受访者在回答“如果可以你会把Ruby的哪些特性加入Java“这个问题时，提到了Ruby的一些我个人认为比较突出的语法特性。其实并不是针对Java语言，何况6年时间过去，以Java语法特性的加入速度怕早就有Ruby这些特性了。我对Java不熟，仅限于曾经写的几个简单的android应用，买了&lt;Java编程思想>也没翻完。</p>

<p>以下内容半翻译自原文。</p>

<h3>Closure</h3>

<p>闭包支持将代码块作为函数参数传递。这在写很多代码时会比较方便，例如以下代码打印10次字符串：</p>

<p>{% highlight ruby %}
10.times { puts "Hello" }
{% endhighlight %}</p>

<!-- more -->


<p>又例如针对数组的每个元素做一些事情（do...end是上例中{}的替代）：</p>

<p>{% highlight ruby %}
array.each do |item|
  item.do_something
end
{% endhighlight %}</p>

<p>也可以构建一个新的数组：</p>

<p>{% highlight ruby %}
array.collect { |number| number * number }
{% endhighlight %}</p>

<p>Ruby中闭包的使用随处可见，它的语法形式太简单，这使得要使用它时所付出的代价很小（想想其他语言里得手动构造一个函数对象吧）。</p>

<h3>Continuation</h3>

<p>使用continuation你可以保存一块代码的执行状态，以便将来某个时刻恢复执行。这就像游戏存档一样，玩到一半存档，一段时间回来后取出存档从上次的进度继续玩。</p>

<p>{% highlight ruby %}
require 'continuation' # 原文中未给这句，须加上</p>

<p>def loop
  for i in 1..10</p>

<pre><code>puts i
callcc { |c| return c } if i == 5
</code></pre>

<p>  end
end
{% endhighlight %}</p>

<p><code>loop</code>函数执行里面那个循环时，当<code>i==5</code>就调用<code>callcc</code>函数（貌似现在Java已有这个了），该函数在回调传入的闭包时构建了一个continuation对象，以上代码直接将此对象返回，循环暂停于<code>i==5</code>。执行代码<code>continuation = loop</code>输出：</p>

<p>{% highlight ruby %}
1
2
3
4
5
{% endhighlight %}</p>

<p>然后你可以在任意时刻恢复执行那个循环：<code>continuation.call</code>，得到：</p>

<p>{% highlight ruby %}
6
7
8
9
10
{% endhighlight %}</p>

<p>这个continuation和Lua里的<code>coroutine</code>很像，可以用于实现轻量级的线程。</p>

<h3>mix-ins</h3>

<p>这节没看懂。提到了AOP、POJO之类的术语，大概是Java世界里的什么东西。看起来像是针对before/after method的东西，意思就是执行某个函数时，会先去执行before函数，完了后再执行after函数，Lisp里有这个概念。</p>

<h3>Open class</h3>

<p>这个算是Ruby里用的比较多的特性。open classes可以让你在很多情况下“打开“并重定义某个类，这个类可以是你使用的任意库里的类。Ruby里的类并不是一个封闭的代码集合，作为一个类库的使用者你甚至可以不用修改类库的代码而重新定义、扩展里面的接口。例如Ruby中的数字其实就是Fixnum类，而我们可以为Fixnum直接添加更多的接口（原文的代码有问题，以下我做了修改）：</p>

<p>{% highlight ruby %}
class Fixnum
  def days</p>

<pre><code>self.hours * 24
</code></pre>

<p>  end</p>

<p>  def hours</p>

<pre><code>self.minutes * 60
</code></pre>

<p>  end</p>

<p>  def minutes</p>

<pre><code>self.seconds * 60
</code></pre>

<p>  end</p>

<p>  def seconds</p>

<pre><code>self
</code></pre>

<p>  end</p>

<p>  def from_now</p>

<pre><code>Time.now + self
</code></pre>

<p>  end</p>

<p>  def ago</p>

<pre><code>Time.now - self
</code></pre>

<p>  end
end
{% endhighlight %}</p>

<p>基于以上，我们可以写出<code>10.days.ago</code>或者<code>6.hours.from_now</code>这样的代码。这有助于构建DSL(domain specific language)。</p>

<h3>Full object orientation</h3>

<p>Ruby中一切都是对象。这让我们写代码变得更容易，因为不用处理特殊情况。这些特殊情况主要就是很多基础数据类型并非对象，但Ruby里是。Ruby里每个对象都有一个函数<code>class</code>，表示该对象的类型：</p>

<p>{% highlight ruby %}
1.class # => Fixnum
2.5.class # = > Float
"hello".class # => String
[1, 2].class # => Array
(1..2).class # => Range
{% endhighlight %}</p>

<p>全文完。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby中的case...when语法]]></title>
    <link href="http://codemacro.com/2012/07/26/ruby-case-when/"/>
    <updated>2012-07-26T10:13:00+08:00</updated>
    <id>http://codemacro.com/2012/07/26/ruby-case-when</id>
    <content type="html"><![CDATA[<p>参考<a href="http://stackoverflow.com/questions/948135/how-to-write-a-switch-statement-in-ruby">How to write a switch statement in Ruby?</a></p>

<p>其实用Rails写个业务逻辑不算复杂的app根本用不上ruby的很多高级语法，更别说&lt;meta programming in ruby>中的东西了（凡是打上meta programming标签的都不是什么简单的东西，参考c++/lisp）。ruby中的case...when语句和c/c++中的switch...case其实根本不是一回事。&lt;Programming in Ruby 2nd>：</p>

<blockquote><p>case operates by comparing the target with each of the comparison expression after the when keywords. This test is done using comparison === target.</p></blockquote>

<!-- more -->


<p>也就是说case...when用的不是==操作符，不是使用相等逻辑去判断，而是使用===运算符。===运算符从C++的角度简单来说就是判定is-a关系，例如</p>

<p>{% highlight ruby %}
Fixnum === 1
String === "hello"
(1..3) === 2
{% endhighlight %}</p>

<p>1 is a Fixnum，hello is a String，2 is a (1..3) (in the range of)。比较让人产生误解的，大概就是1===1也为true。所以理解起来，也不纯碎是is-a关系。</p>

<p>{% highlight ruby %}
case a
when Fixnum</p>

<pre><code>puts "fixnum"
</code></pre>

<p>when String</p>

<pre><code>puts "string"
</code></pre>

<p>when (1..3)</p>

<pre><code>puts "between 1 and 3"
</code></pre>

<p>else</p>

<pre><code>puts "default"
</code></pre>

<p>end
{% endhighlight %}</p>

<p>最后，作为一种functional-like language，其语句也算是表达式，意即也有返回值。case..when的返回值就是执行的分支的返回值。</p>
]]></content>
  </entry>
  
</feed>

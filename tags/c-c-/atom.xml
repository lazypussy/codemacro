<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: c/c++ | loop in codes]]></title>
  <link href="http://codemacro.com/tags/c-c-/atom.xml" rel="self"/>
  <link href="http://codemacro.com/"/>
  <updated>2012-09-03T15:25:32+08:00</updated>
  <id>http://codemacro.com/</id>
  <author>
    <name><![CDATA[Kevin Lynx]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[为什么处理排序的数组要比非排序的快？]]></title>
    <link href="http://codemacro.com/2012/08/29/branch-predictor/"/>
    <updated>2012-08-29T19:55:00+08:00</updated>
    <id>http://codemacro.com/2012/08/29/branch-predictor</id>
    <content type="html"><![CDATA[<p>参考<a href="http://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-an-unsorted-array">Why is processing a sorted array faster than an unsorted array?</a></p>

<h2>问题</h2>

<p>看以下代码：</p>

<p>{% highlight c++ %}</p>

<h1>include <algorithm></h1>

<h1>include <ctime></h1>

<h1>include <iostream></h1>

<p>int main()
{</p>

<pre><code>// generate data
const unsigned arraySize = 32768;
int data[arraySize];

for (unsigned c = 0; c &lt; arraySize; ++c)
    data[c] = std::rand() % 256;


// !!! with this, the next loop runs faster
std::sort(data, data + arraySize);


// test
clock_t start = clock();
long long sum = 0;

for (unsigned i = 0; i &lt; 100000; ++i)
{
    // primary loop
    for (unsigned c = 0; c &lt; arraySize; ++c)
    {
        if (data[c] &gt;= 128)
            sum += data[c];
    }
}

double elapsedTime = static_cast&lt;double&gt;(clock() - start) / CLOCKS_PER_SEC;

std::cout &lt;&lt; elapsedTime &lt;&lt; std::endl;
std::cout &lt;&lt; "sum = " &lt;&lt; sum &lt;&lt; std::endl;
</code></pre>

<p>}</p>

<p>{% endhighlight %}</p>

<p>问题就在于，去掉<code>std::sort</code>那一行，以上代码将运行更长的时间。在我的机器上未去掉<code>std::sort</code>耗时8.99s，去掉后耗时24.78s。编译器使用的是gcc4.4.3。事实上，以上代码跟编译器没有关系，甚至跟语言没有关系。那这是为什么呢？</p>

<!-- more -->


<p>这跟处理这个数组的逻辑有非常大的关系。如以上代码所示，这个循环里有个条件判断。条件判断被编译成二进制代码后，就是一个跳转指令，类似：</p>

<p>{% highlight asm %}
jl SHORT $LN3@main
{% endhighlight %}</p>

<p>具体为什么会不同，这涉及到计算机CPU执行指令时的行为。</p>

<h2>CPU的流水线指令执行</h2>

<p>想象现在有一堆指令等待CPU去执行，那么CPU是如何执行的呢？具体的细节可以找一本计算机组成原理的书来看。CPU执行一堆指令时，并不是单纯地一条一条取出来执行，而是按照一种流水线的方式，在CPU真正执行一条指令前，这条指令就像工厂里流水线生产的产品一样，已经被经过一些处理。简单来说，一条指令可能经过这些过程：取指(Fetch)、解码(Decode)、执行(Execute)、放回(Write-back)。</p>

<p>假设现在有指令序列ABCDEFG。当CPU正在执行(execute)指令A时，CPU的其他处理单元（CPU是由若干部件构成的）其实已经预先处理到了指令A后面的指令，例如B可能已经被解码，C已经被取指。这就是流水线执行，这可以保证CPU高效地执行指令。</p>

<h2>Branch Prediction</h2>

<p>如上所说，CPU在执行一堆顺序执行的指令时，因为对于执行指令的部件来说，其基本不需要等待，因为诸如取指、解码这些过程早就被做了。但是，当CPU面临非顺序执行的指令序列时，例如之前提到的跳转指令，情况会怎样呢？</p>

<p>取指、解码这些CPU单元并不知道程序流程会跳转，只有当CPU执行到跳转指令本身时，才知道该不该跳转。所以，取指解码这些单元就会继续取跳转指令之后的指令。当CPU执行到跳转指令时，如果真的发生了跳转，那么之前的预处理（取指、解码）就白做了。这个时候，CPU得从跳转目标处临时取指、解码，然后才开始执行，这意味着：CPU停了若干个时钟周期！</p>

<p>这其实是个问题，如果CPU的设计放任这个问题，那么其速度就很难提升起来。为此，人们发明了一种技术，称为branch prediction，也就是分支预测。分支预测的作用，就是预测某个跳转指令是否会跳转。而CPU就根据自己的预测到目标地址取指令。这样，即可从一定程度提高运行速度。当然，分支预测在实现上有很多方法。</p>

<p>简单的预测可以直接使用之前的实际执行结果。例如某个跳转指令某一次产生了跳转，那么下一次执行该指令时，CPU就直接从跳转目标地址处取指，而不是该跳转指令的下一条指令。</p>

<h2>答案</h2>

<p>了解了以上信息后，文章开头提出的问题就可以解释了。这个代码中有一个循环，这个循环里有一个条件判断。每一次CPU执行这个条件判断时，CPU都可能跳转到循环开始处的指令，即不执行if后的指令。使用分支预测技术，当处理已经排序的数组时，在若干次<code>data[c]&gt;=128</code>都不成立时（或第一次不成立时，取决于分支预测的实现），CPU预测这个分支是始终会跳转到循环开始的指令时，这个时候CPU将保持有效的执行，不需要重新等待到新的地址取指；同样，当<code>data[c]&gt;=128</code>条件成立若干次后，CPU也可以预测这个分支是不必跳转的，那么这个时候CPU也可以保持高效执行。</p>

<p>相反，如果是无序的数组，CPU的分支预测在很大程度上都无法预测成功，基本就是50%的预测成功概率，这将消耗大量的时间，因为CPU很多时间都会等待取指单元重新取指。</p>

<p>本文完。最后感叹下stackoverflow上这个帖子里那个老外回答问题的专业性，我要是楼主早就感动得涕泪横飞了。感谢每一个传播知识的人。</p>

<h2>参考资料</h2>

<ol>
<li><a href="http://blog.sina.com.cn/s/blog_6c673e570100zfmo.html">http://blog.sina.com.cn/s/blog_6c673e570100zfmo.html</a></li>
<li><a href="http://www.cnblogs.com/dongliqian/archive/2012/04/05/2433847.html">http://www.cnblogs.com/dongliqian/archive/2012/04/05/2433847.html</a></li>
<li><a href="http://en.wikipedia.org/wiki/Branch_predictor">http://en.wikipedia.org/wiki/Branch_predictor</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Null Object模式]]></title>
    <link href="http://codemacro.com/2012/08/29/null-object-pattern/"/>
    <updated>2012-08-29T15:57:00+08:00</updated>
    <id>http://codemacro.com/2012/08/29/null-object-pattern</id>
    <content type="html"><![CDATA[<p>Null Object模式用于代替空指针（C++中），以避免上层模块对返回值做空值判定。Null Object模式返回的不是一个空指针，而是一个空对象，上层模块对返回值做操作时，不需要做空判定，而是按正常逻辑调用这个对象的某个接口，只不过对于空对象而言，这个接口什么事也没做，例如：</p>

<p>{% highlight c++ %}
class animal {
public:
  virtual void make_sound() = 0;
};</p>

<p>class dog : public animal {
  void make_sound() { cout &lt;&lt; "woof!" &lt;&lt; endl; }
};</p>

<p>class null_animal : public animal {
  void make_sound() { }
};</p>

<p>{% endhighlight %}</p>

<p>在我看来这个模式在C++中其实挺扯淡的，因为去判断一个指针是否为NULL，远比创建一个空类，并且添加若干个空函数代价小更多。更何况，我们还不知道<code>null_animal</code>的生命周期如何管理。</p>

<p>但是在我以往写的代码中，我也写过一些避免空指针判定的代码，例如我会使用引用。注意，引用肯定不能保证所对应的对象是合法的，这就像无法确定一个指针是不是野指针一样：</p>

<p>{% highlight c++ %}
const Item &amp;Container::FindItem(int id) const {</p>

<pre><code>static Item null_item;
Table::const_iterator it = m_items.find(id);
return it == m_items.end() ? null_item : it-&gt;second;
</code></pre>

<p>}
{% endhighlight %}</p>

<p>参考<a href="http://en.wikipedia.org/wiki/Null_Object_pattern">http://en.wikipedia.org/wiki/Null_Object_pattern</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++11中lambda概览]]></title>
    <link href="http://codemacro.com/2012/08/21/c-plus-plus-11-lambda-overview/"/>
    <updated>2012-08-21T16:44:00+08:00</updated>
    <id>http://codemacro.com/2012/08/21/c-plus-plus-11-lambda-overview</id>
    <content type="html"><![CDATA[<p>虽然我对C++11没有什么兴趣，因为C++03就已经有很多复杂的技术了。我曾经试图把我学到的那些复杂的C++技术应用到项目中，但悲剧地发现这给团队其他成员带来了不小的负担。其实也给未来一段时间的自己带来了不小的负担。尤其是template的应用，template代码从外表上就一副唬人的样子，就像即使你会Lisp，并且对Lisp中的括号不以为然，但看到满屏幕的括号时依然内心不安。</p>

<p>但是稍微对C++11的一些特性做了解后，单从理论上来说，还是挺让人有兴趣的。我感觉C++11加入了不少函数式语言的特性和思想，这是我感兴趣的最大理由。今天来看看C++11中的lambda。</p>

<!-- more -->


<p>C++03中，在使用STL容器时，或者我自己写的类中，常有遍历的需求，本来写个functor传进去就可以，但是这functor偏偏写的很恶心。因为你需要局部定义一个结构体，重载operator()，并且，如果这个operator()依赖这个functor构建时的上下文信息，你得往这个结构体里塞入若干成员，当然还得让构造函数的参数变得越来越长。最后，在包含你这个functor使用以及结构体定义的这个代码块中，在其代码格式上就变得非常奇怪。如果你像我一样常这样应用，一定深有感触。</p>

<p>然后，C++11来了，C++11中的lambda，就我个人而言，其语法还是非常现代的。来看看其文法形式（截自<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2550.pdf">N2550</a>）：</p>

<pre><code>lambda-expression:
      lambda-introducer lambda-parameter-declaration compound-statement
lambda-introducer:
      [ lambda-capture ]
lambda-capture:
      capture-default
      capture-list
      capture-default , capture-list
capture-default:
      &amp;
      =
capture-list:
      capture
      capture-list , capture
capture:
      identifier
      &amp; identifier
      this
lambda-parameter-declaration:
      ( lambda-parameter-declaration-list ) exception-specification lambda-return-type-clause
lambda-parameter-declaration-list:
      lambda-parameter
      lambda-parameter , lambda-parameter-declaration-list
lambda-parameter:
      decl-specifier-seq declarator
lambda-return-type-clause:
      -&gt; type-id
</code></pre>

<p>翻译过来大致就是这样的形式：</p>

<pre><code>[capture] (parameter) spec -&gt;return-type { body }
</code></pre>

<p>capture就是这个lambda实现里可以访问的这个lambda定义时作用域里的变量列表，就像Lua里的upvalue。其实我觉得这个才是lambda最方便程序员的地方，一般的函数式语言其实不需要显示声明这个列表，直接引用这些变量即可。后面的部分都比较好理解，parameter就是这个lambda被调用时的形参列表，return-type就是这个lambda的返回值类型，body自然就是这个lambda的实现。至于spec，主要就是指定异常及body里对capture里的变量的使用权限。一个例子：</p>

<p>{% highlight c++ %}
vector<int> ints;
ints.push_back(99);
ints.push_back(100);
ints.push_back(101);
int threhold = 100;
int sum = 0;
for_each(ints.begin(), ints.end(),</p>

<pre><code>    [threhold, &amp;sum] (int v) { 
        if (v &gt;= threhold) ++ sum;
        });
</code></pre>

<p>printf("%d\n", sum);
{% endhighlight %}</p>

<p>capture使用了threhold和sum，但是threhold仅使用其值，而sum则使用了其引用，通过结果可以看出lambda中改变了sum的值。</p>

<p>C++11正在被越来越多的编译器支持，也慢慢地支持得更好。这里有个<a href="http://wiki.apache.org/stdcxx/C++0xCompilerSupport">表</a>，罗列了C++11的各个特性在各个编译器上的支持情况，仅供查阅（以上示例代码测试于vs2010，即MSVC10.0）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用memcmp比较两个变量结果一定吗？]]></title>
    <link href="http://codemacro.com/2012/08/17/memcmp-on-copy-value/"/>
    <updated>2012-08-17T11:37:00+08:00</updated>
    <id>http://codemacro.com/2012/08/17/memcmp-on-copy-value</id>
    <content type="html"><![CDATA[<p>参考<a href="http://stackoverflow.com/questions/11994513/is-using-memcmp-on-array-of-int-strictly-conforming">Is using memcmp on array of int strictly conforming?</a></p>

<p>以下代码一定会输出ok吗？</p>

<p>{% highlight c %}</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;string.h></h1>

<p>struct S { int array[2]; };</p>

<p>int main () {</p>

<pre><code>struct S a = { { 1, 2 } };
struct S b;
b = a;
if (memcmp(b.array, a.array, sizeof(b.array)) == 0) {
    puts("ok");
}
return 0;
</code></pre>

<p>}
{% endhighlight %}</p>

<!-- more -->


<p>我在vs2005以及gcc4.4.3上做了测试，都输出了ok。但这并不意味这个代码会永远输出ok。问题主要集中于这里使用了赋值语句来复制值，但却使用了memcmp这个基于内存数据比较的函数来比较值。</p>

<p>c语言中的赋值运算符（=）被定义为基于值的复制，而不是基于内存内容的复制。</p>

<blockquote><p><strong>C99 section 6.5.16.1 p2:</strong> In simple assignment (=), the value of the right operand is converted to the type of the assignment expression and replaces the value stored in the object designated by the left operand.</p></blockquote>

<p>这个其实很好理解，尤其在不同类型的数字类型间复制时，例如：</p>

<p>{% highlight c %}
float a = 1.1;
int b = a;
{% endhighlight %}</p>

<p>因为浮点数和整形数的内存布局不一样，所以肯定是基于值的一种复制。另外，按照语言标准的思路来看，内存布局这种东西一般都属于实现相关的，所以语言标准是不会依赖实现去定义语言的。</p>

<p>上面的定理同样用于复杂数据类型，例如结构体。我们都知道结构体每个成员之间可能会有字节补齐，而使用赋值运算符来复制时，会不会复制这些补齐字节的内容，是语言标准未规定的。这意味着使用memcmp比较两个通过赋值运算符复制的两个结构体时，其结果是未定的。</p>

<p>但是上面的代码例子中，比较的其实是两个int数组。这也无法确认结果吗？这个问题最终集中于，难道int也会有不确定的补齐字节数据？</p>

<blockquote><p><strong>C99 6.2.6.2 integer types</strong> For signed integer types, the bits of the object representation shall be divided into three groups: value bits, padding bits, and the sign bit. [...] The values of any padding bits are unspecified.</p></blockquote>

<p>这话其实我也不太懂。一个有符号整数int，其内也有补齐二进制位(bits)？</p>

<p>但无论如何，这个例子都不算严谨的代码。人们的建议是使用memcpy来复制这种数据，因为memcpy和memcmp都是基于内存内容来工作的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[像写函数式语言代码一样写C++]]></title>
    <link href="http://codemacro.com/2012/07/30/write-cpp-like-fp/"/>
    <updated>2012-07-30T17:11:00+08:00</updated>
    <id>http://codemacro.com/2012/07/30/write-cpp-like-fp</id>
    <content type="html"><![CDATA[<p>忘记最早接触函数式编程语言是什么时候了，也忘记接触的第一门函数式语言是哪一门。断断续续接触过好几种函数式语言（当然都算不纯的，ruby/lisp不算纯吧），这些语言的思想在潜移默化中多多少少对我有所影响。</p>

<p>我是个C++程序员，我不知道我平时写的都是些什么代码。最让人印象深刻就是我会经常写遍历STL容器的代码，是经常，这样的遍历你可能也不陌生：</p>

<p>{% highlight c++ %}
{% raw %}
for (ListType::iterator it = con.begin(); it != con.end(); ++it) {</p>

<pre><code>something
</code></pre>

<p>}
{% endraw %}
{% endhighlight %}</p>

<!-- more -->


<p>或者针对std::map/set等的查找：</p>

<p>{% highlight c++ %}
{% raw %}
Table::iterator it = table.find(key);
if (it == table.end())</p>

<pre><code>do-something
</code></pre>

<p>do-something
{% endraw %}
{% endhighlight %}</p>

<p>多亏STL接口的一致性，这让我们写出了很多“一致性“代码。慢慢地我觉得恶心，不禁想起函数式编程语言中，对于这种需求一般都会提供类似的接口：</p>

<p>{% highlight lua %}
con.map(function (it) if (it->some-filed == some-value) return something end)</p>

<h1>或者</h1>

<p>con.each do |it| if it.some-filed == some-value then return something end end</p>

<h1>或者</h1>

<p>(con.map (lambda (it) (if ((= it.some-filed some-value)) (return something))))
{% endhighlight %}</p>

<p>（好吧，lisp我又忘了）总之，这种针对容器的遍历操作，都会成为一种内置接口，并且通过lambda来让用户直接编写处理代码，少去写循环的冗余。然后，我写了类似下面的一组宏（随手敲的不保证能运行）：</p>

<p>{% highlight c++ %}
{% raw %}</p>

<h1>define IT_N __it</h1>

<h1>define TRAVERSE_MAP(type, map, exps) \</h1>

<pre><code>for (type::iterator IT_N = map.begin(); IT_N != map.end(); ++IT_N) { \
    exps; \
}
</code></pre>

<h1>define I_KEY (IT_N->first)</h1>

<h1>define I_VALUE (IT_N->second)</h1>

<h1>define TRAVERSE_LIST(type, list, exps) \</h1>

<pre><code>for (type::iterator IT_N = list.begin(); IT_N != list.end(); ++IT_N) { \
    exps; \
}
</code></pre>

<h1>define L_VALUE (*IT_N)</h1>

<h1>define FIND_MAP_ITEM(type, map, key, fexps, texps) \</h1>

<pre><code>do { \
    type::iterator IT_N = map.find(key); \
    if (IT_N == map.end()) { \
        fexps; \
    } else { \
        texps; \
    } \
} while(0)
</code></pre>

<h1>define VAL_N __val</h1>

<h1>define FIND_LIST_ITEM_IF(type, list, cmp, fexps, texps) \</h1>

<pre><code>do { \
    struct Comp { \
        bool operator() (const type::value_type &amp;VAL_N) const { \
            return cmp; \
        } \
    }; \
    type::iterator IT_N = std::find_if(list.begin(), list.end(), Comp()); \
    if (IT_N != list.end()) { \
        texps; \
    } else { \
        fexps; \
    } \
} while(0)
</code></pre>

<h1>define NULL_EXP ;</h1>

<p>{% endraw %}
{% endhighlight %}</p>

<p>当然，以上接口都还包含一些const版本，用于const容器的使用。使用的时候（截取的项目中的使用例子）：</p>

<p>{% highlight c++ %}
TRAVERSE_MAP(TimerTable, m_timers,</p>

<pre><code>    I_VALUE.obj-&gt;OnTimerCancel(I_KEY, I_VALUE.arg);
    TIMER_CANCEL(I_VALUE.id)); 
</code></pre>

<p>TRAVERSE_LIST(AreaList, areas,</p>

<pre><code>    ids.push_back(L_VALUE-&gt;ID()));
</code></pre>

<p>FIND_MAP_ITEM(PropertyTable, m_properties, name,</p>

<pre><code>    LogWarn("set a non-existed property %s", name.c_str()); return NIL_VALUE,
    if (val.Type() != I_VALUE.type()) {
        return NIL_VALUE; 
    } else {
        GValue old = I_VALUE;
        I_VALUE = val; 
        return old;
    });
</code></pre>

<p>{% endhighlight %}</p>

<p>多亏了C/C++宏对一切内容的可容纳性，可以让我往宏参数里塞进像if这种复合语句，甚至多条语句（例如最后一个例子）。这些宏我使用了一段时间，开始觉得挺爽，很多函数的实现里，我再也不用写那些重复的代码了。但是后来我发觉这些代码越来越恶心了。最大的弊端在于不可调试，我只能将断点下到更深的代码层；然后就是看起来特不直观，连作者自己都看得觉得不直观了，可想而知那些连函数式编程语言都不知道是什么的C++程序员看到这些代码会是什么心情（可以想象哥已经被诅咒了多少次）。</p>

<p>函数式语言让人写出更短的代码，这一点也对我有影响，例如我最近又写下了一些邪恶代码：</p>

<p>{% highlight c++ %}
// split a string into several sub strings by a split character i.e:
// "a;b;c;" => "a", "b", "c"
// "a;b;c" => "a", "b", "c"
std::vector&lt;std::string> SplitString(const std::string &amp;str, char split) {</p>

<pre><code>std::vector&lt;std::string&gt; ret;
size_t last = 0;
for (size_t pos = str.find(split); pos != std::string::npos; last = pos + 1, pos = str.find(split, last)) {
    ret.push_back(str.substr(last, pos - last));
}
return last &lt; str.length() ? ret.push_back(str.substr(last)) : 0, ret;
</code></pre>

<p>}
{% endhighlight %}</p>

<p>恶心的就是最后那条return语句，因为我需要处理"a;b;c"这种c后面没加分隔符的情况，但我并不愿意为了这个需求再写一个会占超过一行的if语句。因为，我太喜欢ruby里的if了：</p>

<p>{% highlight ruby %}
do-something if exp
{% endhighlight %}</p>

<p>也就是ruby里允许这种只有一行if的代码将if放在其后并作为一条语句。我的不愿意其实是有理由的，在c/c++中有太多只有一行条件体的if语句，对这些语句参合进编程风格/可读性进来后，就不得不让你写出不安的代码，例如：</p>

<p>{% highlight c++ %}
if (something) return something; // 某些编程风格里不允许这样做，因为它不方便调试</p>

<p>if (something)</p>

<pre><code>return something; // 某些风格里又有大括号的统一要求
</code></pre>

<p>if (something) {</p>

<pre><code>return something; // 就算符合风格了，但这一条语句就得多个大括号
</code></pre>

<p>}</p>

<p>if (something)
{</p>

<pre><code>return something; // 某些风格里这大括号就更奢侈了
</code></pre>

<p>}
{% endhighlight %}</p>

<p>这个return除了乍看上去有点纠结外，其实也不算什么大问题，但是那个问号表达式返回的0实在没有任何意义，而正是没有意义才会让它误导人。本来我是可以写成：</p>

<p>{% highlight c++ %}
return last &lt; str.length() &amp;&amp; ret.push_back(str.substr(last)), ret;
{% endhighlight %}</p>

<p>这样利用条件表达式的短路运算，代码也清晰多了。但是，std::vector::push_back是一个没有返回值的函数，所以。</p>

<p>全文完。</p>
]]></content>
  </entry>
  
</feed>

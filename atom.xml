<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[loop in codes]]></title>
  <link href="http://kevinlynx.github.com/codemacro/atom.xml" rel="self"/>
  <link href="http://kevinlynx.github.com/codemacro/"/>
  <updated>2012-04-28T11:35:49+08:00</updated>
  <id>http://kevinlynx.github.com/codemacro/</id>
  <author>
    <name><![CDATA[Kevin Lynx]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[谈谈我们的游戏逻辑服务器实现（二）]]></title>
    <link href="http://kevinlynx.github.com/codemacro/2012/04/25/game-server-info-2/"/>
    <updated>2012-04-25T00:00:00+08:00</updated>
    <id>http://kevinlynx.github.com/codemacro/2012/04/25/game-server-info-2</id>
    <content type="html"><![CDATA[<p>上一篇谈了一些关键技术的实现方案。本篇描述一些遇到的问题。</p>

<h2>一</h2>

<p>在策划制作完了几个职业后（主要是技能制作），大概去年年底公司内部进行了一次混战测试。30个角色在一个场景进行混战，测试结果从技术上来说非常不理想。首先是客户端和服务器都巨卡无比。服务器CPU一直是满负载状态。而客户端又频繁宕机。</p>

<p>我们关注的主要问题，是服务器CPU满负载问题。最开始，我通过日志初步定位为网络模块问题，因为逻辑线程表现不是那么差。然后考虑到技能过程中的特效、动作都是通过服务器消息驱动，并且本身特效和动作就比一般网游复杂，通过逐一屏蔽这一部分功能，最终确认确为网络模块导致。然后团队决定从两方面努力：重写网络模块，改善性能；改善技能实现机制，将表现类逻辑移到客户端。</p>

<!-- more -->


<p>至于网络模块，在后来才发现，虽然网络流量过高，但导致网络线程CPU满的原因竟然是网络模块自身的流量限制导致。而技能实现机制的改善，考虑到改动的成本，最终使用了一种RPC机制，让服务器脚本可以调用客户端脚本，并且支持传入复杂参数。然后策划通过一些关键数据在客户端计算出特效、动作之类。</p>

<p>此外，程序将更多的技能属性广播给客户端，一个客户端上保存了周围角色的技能数据，从而可以进行更多的客户端逻辑。这一块具体的修改当然还是策划在做（我们的脚本策划基本就是半个程序员）。后经测试，效果改善显著。</p>

<h2>二</h2>

<p>在策划制作了一个PVP竞技副本后，服务器在10V10测试过程中又表现出CPU负载较高的情况。这个问题到目前为止依然存在，只不过情况略微不同。</p>

<p>首先是触发器生命周期的问题。触发器自身包含最大触发次数、存留时间等需求，即当触发一定次数，或超过存留时间后，需要由程序自动删除；另一方面，触发器可以是定时器类型，而定时器也决定了触发器的生命周期。这一块代码写的非常糟糕，大概就是管理职责划分不清，导致出现对象自己删除自己，而删除后还在依赖自己做逻辑。</p>

<p>但这样的逻辑，最多就是导致野指针的出现。不过，这种混乱的代码，也更容易导致BUG。例如，在某种情况下触发器得不到自动删除了。但这个BUG并不是直接暴露的，直接暴露的，是CPU满了。我们的怪物AI在脚本中是通过定时器类触发器驱动的，每次AI帧完了后就注册一个触发器，以驱动下一次AI帧。由于这个BUG导致触发器没有被删除，从而导致服务器上触发器的数量急剧增加。但，这也就导致内存增长吧？</p>

<p>另一个巧合的原因在于，在当时的版本中，触发器是保存一个表里的，即定时器类触发器、属性类触发器、移动类触发器等都在一个表里。每次任意触发器事件发生时，例如属性改变，都会遍历这个表，检查其是否触发。</p>

<p>基于以上原因，悲剧就发生了。在这个怪物的AI脚本里，有行代码设置了怪物的属性。这会导致程序遍历该怪物的所有触发器。而这个怪物的触发器数量一直在增长。然后就出现了在很多游戏帧里出现过长的遍历操作，CPU就上去了。</p>

<p>找到这个问题了几乎花了我一天的时间。因为脚本代码不是我写的，触发器的最初版本也不是我写的。通过逐一排除可能的代码，最终竟然发现是一行毫不起眼的属性改变导致。这个问题的查找流程，反映了将大量逻辑放在脚本中的不便之处：查起问题来实在吃力不讨好。</p>

<p>修复了这个BUG后，我又对触发器管理做了简单的优化。将触发器列表改成二级表，将触发器按照类型保存成几个列表。每次触发事件时，找出对应类型的表遍历。</p>

<h3>改进</h3>

<p>除了修改触发器的维护数据结构外，程序还实现了一套性能统计机制，大概就是统计某个函数在一段时间内的执行时间情况。最初这套机制仅用于程序，但考虑到脚本代码在整个项目中的比例，又决定将其应用到脚本中。</p>

<p>这个统计需要在函数进入退出时做一些事情，C++中可以通过类对象的构建和析构完成，但lua中没有类似机制。最初，我使用了lua的调试库来捕获函数进入/退出事件，但后来又害怕这种方式本身存在效率消耗，就取消了。我们使用lua的方式，不仅仅是全局函数，还包括函数对象。而函数对象是没有名字标示的，这对于日志记录不是什么好事。为了解决这个问题，我只好对部分功能做了封装，并让策划显示填入函数对于的字符串标示。</p>

<p>除此之外，因为触发器是一种重要的敏感资源，我又加入了一个专门的触发器统计模块，分别统计触发器的类型数量、游戏对象拥有的触发器数量等。</p>

<h2>END</h2>

<p>到目前为止，导致服务器CPU负载过高，一般都是由BUG导致。这些BUG通常会造成一个过长的列表，然后有针对这个列表的遍历操作，从而导致CPU负载过高。更重要的，我们使用了这么多的脚本去开发这个游戏，如何找到一个更有效合理的监测方法，如何让程序框架更稳定，则是接下来更困难而又必须去面对的事情。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[谈谈我们的游戏逻辑服务器实现（一）]]></title>
    <link href="http://kevinlynx.github.com/codemacro/2012/04/23/game-server-info-1/"/>
    <updated>2012-04-23T00:00:00+08:00</updated>
    <id>http://kevinlynx.github.com/codemacro/2012/04/23/game-server-info-1</id>
    <content type="html"><![CDATA[<p>我们的逻辑服务器(Game Server，以下简称GS)主要逻辑大概是从去年夏天开始写的。因为很多基础模块，包括整体结构沿用了上个项目的代码，所以算不上从头开始做。转眼又快一年，我觉得回头总结下对于经验的积累太有必要。</p>

<h2>整体架构</h2>

<p>GS的架构很大程度取决于游戏的功能需求，当然更受限于上个项目的基础架构。基础架构包括场景、对象的关系管理，消息广播等。</p>

<!-- more -->


<h3>需求</h3>

<p>这一回，程序员其实已经不需要太过关心需求。因为我们决定大量使用脚本。到目前为止整个项目主要还是集中在技能开发上。而这个使用脚本的度，就是技能全部由策划使用脚本制作，程序员不会去编写某个具体技能，也不会提供某种配置方式去让策划通过配置来开发技能。这真是一个好消息，不管对于程序员而言，还是对于策划而言。但后来，我觉得对于这一点还是带来了很多问题。</p>

<h3>实现</h3>

<p>基于以上需求，程序员所做的就是开发框架，制定功能实现方案。脚本为了与整个游戏框架交互，我们制定了“触发器“这个概念，大概就是一种事件系统。</p>

<p>这个触发器系统，简单来说，就是提供一种“关心“、”通知“的交互方式，也就是一般意义上的事件机制。例如，脚本中告诉程序它关心某个对象的移动，那么当程序中该对象产生移动时，就通知脚本。脚本中可以关心很多东西，包括对象属性，其关心的方式包括属性值改变、变大、变小，各种变化形式；对象开始移动，移动停止；对象碰撞，这个会单独谈谈；定时器等。</p>

<p>除了触发器系统外，还有个较大的系统是游戏对象的属性系统。对象的属性必然是游戏逻辑中策划最关心最容易改动的模块。既然我们程序的大方向是尽可能地不关心策划需求，所以对象属性在设计上就不可能去编写某个具体属性，更不会编写这个属性相关的逻辑功能。简单来说，程序为每个对象维护一个key-value表，也就是属性名、属性值表。该表的内容由脚本填入，脚本享有存取权限。然后脚本中就可以围绕某个属性来编写功能，而程序仅起存储作用。</p>

<p>第三，怪物AI模块。AI模块的设计在开发周期上靠后。同样，程序不会去编写某类AI的实现。程序提供了另一种简单的事件系统，这个系统其实就是一个调用脚本的方案。当关于某个怪物发生了某个事件时，程序调用脚本，传入事件类型和事件参数。这个事件分为两类：程序类和脚本类。脚本类程序不需关心，仅提供事件触发API。程序类事件非常有限：怪物创建、出生、删除。</p>

<p>除了以上三块之外，还有很多零散的脚本交互。例如游戏对象属性初始化，角色进入游戏，角色进入场景等。这些都无关痛痒。</p>

<p>接下来谈一些关键模块的实现。</p>

<p><strong>定时器</strong></p>

<p>整个GS的很多逻辑模块都基于这个定时器来实现。这个定时器接收逻辑模块的注册，在主循环中传入系统时间，定时器模块检查哪些定时器实例超时，然后触发调用之。这个主循环以每帧5ms的速率运行，也即帧率1000/5。</p>

<p>这个定时器是基于操作系统的时间。随着帧率的不同，它在触发逻辑功能时，就必然不精确。游戏客户端（包括单机游戏）在帧率这块的实现上，一般逻辑功能的计算都会考虑到一个dt（也就是一帧的时间差），例如移动更新，一般都是x = last_x + speed * dt。但，我们这里并没有这样做。我们的几乎所有逻辑功能，都没有考虑这个时间差。</p>

<p>例如，我们的移动模块注册了一个固定时间值的定时器，假设是200ms。理想情况下，定时器模块每200ms回调移动模块更新坐标。但现实情况肯定是大于200ms的更新频率，悲剧的是，移动模块每次更新坐标都更新一个固定偏移。这显然是不够精确的。</p>

<p>更悲剧的是，定时器的实现中，还可能出现跳过一些更新帧。例如，理论情况下，定时器会在系统时间点t1/t2/t3/t4分别回调某个逻辑模块。某一帧里，定时器大概在t1回调了某逻辑模块，而当该帧耗时严重时，下一帧定时器模块在计算时，其时间值为t，而t大于t4，此时定时器模块跳过t2/t3。相当于该逻辑模块少了2次更新。这对于移动模块而言，相当于某个对象本来在1秒的时间里该走5格，但实际情况却走了1格。</p>

<p>当然，当游戏帧率无法保证时，逻辑模块运行不理想也是情有可原的。但，不理想并不包含BUG。而我觉得，这里面是可能出现BUG的。如何改善这块，目前为止我也没什么方案。</p>

<p><strong>移动</strong></p>

<p>有很多更上层的模块依赖移动。我们的移动采用了一种分别模拟的实现。客户端将复杂的移动路径拆分为一条一条的线段，然后每个线段请求服务器移动。然后服务器上使用定时器来模拟在该线段上的移动。因为服务器上的阻挡是二维格子，这样服务器的模拟也很简单。当然，这个模块在具体实现上复杂很多，这里不细谈。</p>

<p><strong>碰撞检测</strong></p>

<p>我们的技能要求有碰撞检测，这主要包括对象与对象之间的碰撞。在最早的实现中，当脚本关心某个对象的碰撞情况时，程序就为该对象注册定时器，然后周期触发检测与周围对象的距离关系，这个周期低于100ms。这个实现很简单，维护起来也就很简单。但它是有问题的。因为它基于了一个不精确的定时器，和一个不精确的移动模块。</p>

<p>首先，这个检测是基于对象的当前坐标。前面分析过在帧率掉到移动更新帧都掉帧的情况下，服务器的对象坐标和理论情况差距会很大，而客户端基本上是接近正确情况的，这个时候做的距离检测，就不可能正确。另一方面，就算移动精确了，这个碰撞检测还是会带来BUG。例如现在检测到了碰撞，触发了脚本，脚本中注册了关心离开的事件。但不幸的是，在这个定时器开始检测前，这两个对象已经经历了碰撞、离开、再碰撞的过程，而定时器开始检测的时候，因为它基于了当前的对象坐标，它依然看到的是两个对象处于碰撞状态。</p>

<p>最开始，我们直觉这样的实现是费时的，是不精确的。然后有了第二种实现。这个实现基于了移动的实现。因为对象的移动是基于直线的（服务器上）。我们就在对象开始移动时，根据移动方向、速度预测两个对象会在未来的某个时间点发生碰撞。当然，对于频繁的小距离移动而言，这个预测从直觉上来说也是费时的。然后实现代码写了出来，一看，挺复杂，维护难度不小。如果效果好这个维护成本也就算了，但是，它依然是不精确的。因为，它也依赖了这个定时器。</p>

<p>例如，在某个对象开始移动时，我们预测到在200ms会与对象B发生碰撞。然后注册了一个200ms的定时器。但定时器不会精确地在未来200ms触发，随着帧率的下降，400ms触发都有可能。即便不考虑帧率下降的情况，它还是有问题。前面说过，我们游戏帧保证每帧至少5ms，本来这是一个限帧手段，目的当然是避免busy-loop。这导致定时器最多出现5ms的延迟。如果策划使用这个碰撞检测去做飞行道具的实现，例如一个快速飞出去的火球，当这个飞行速度很快的时候，这5ms相对于这个预测碰撞时间就不再是个小数目。真悲剧。</p>

<p><strong>技能</strong></p>

<p>虽然具体的技能不是程序写的，但正如把几乎所有具体逻辑交给策划写带来的悲剧一样：这事不是你干的，但你得负责它的性能。所以有必要谈谈技能的实现。</p>

<p>技能的实现里，只有一个技能使用入口，程序只需要在客户端发出使用技能的消息时，调用这个入口脚本函数。然后脚本中会通过注册一些触发器来驱动整个技能运作。程序员一直希望策划能把技能用一个统一的、具体的框架统一起来，所谓的变动都是基于这个框架来变的。但策划也一直坚持，他们心目中的技能是无法统一的。</p>

<p>我们的技能确实很复杂。一个技能的整个过程中，服务器可能会和客户端发生多次消息交互。在最初的实现中，服务器甚至会控制客户端的技能特效、释放动作等各种细节；甚至于服务器会在这个过程中依赖客户端的若干次输入。</p>

<hr/>


<p>下一篇我将谈谈一些遇到的问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Github Page来写博客]]></title>
    <link href="http://kevinlynx.github.com/codemacro/2012/04/20/blog-on-github/"/>
    <updated>2012-04-20T00:00:00+08:00</updated>
    <id>http://kevinlynx.github.com/codemacro/2012/04/20/blog-on-github</id>
    <content type="html"><![CDATA[<p>最开始知道<a href="http://pages.github.com/">Github Page</a>，是通过<a href="http://codertrace.com">codertrace</a>上的某些注册用户，他们的BLOG就建立在Github Page上，并且清一色的干净整洁（简陋），这看起来很酷。</p>

<p>Github提供了很多很合coder口味的东西，例如Gist，也包括这里提到的Page。Page并不是特用于建立博客的产品，它仅提供静态页面的显示。它最酷的地方，是通过Git的方式来让你管理这些静态页面。通过建立一个repository，并使用markdown语法来编写文章，然后通过Git来管理这些文章，你就可以自动将其发布出去。</p>

<p>当然，要搭建一个像样点的博客，使用Github Page还不太方便。这里可以使用<a href="https://github.com/mojombo/jekyll">Jekyll</a>。Jekyll是一个静态网页生成器，它可以将你的markdown文件自动输出为对应的网页。而Github Page也支持Jekyll。</p>

<p>为了更方便地搭建博客，我还使用了<a href="http://jekyllbootstrap.com">Jekyll-bootstrap</a>。jekyll-bootstrap其实就是一些模板文件，提供了一些博客所需的特殊功能，例如评论，访问统计。</p>

<p>基于以上，我就可以像在Github上做项目一样，编写markdown文章，然后git push即可。可以使用jekyll &#8211;server在本地开启一个WEB SERVER，然后编写文章时，可以在本地预览。</p>

<p>Github Page还支持custom domain，如你所见，我将我的域名codemacro.com绑定到了Github Page所提供的IP，而不再是我的VPS。你可以通过kevinlynx.github.com或者codemacro.com访问这个博客。</p>

<hr/>


<p>当然实际情况并没有那么简单，例如并没有太多的theme可供选择，虽然jekyll-bootstrap提供了一些，但还是太少。虽然，你甚至可以fork别人的jekyll博客，使用别人定制的theme，但，这对于一个不想过于折腾的人说，门槛也过高了点。</p>

<p>jekyll-bootstrap使用了twitter的bootstrap css引擎，但我并不懂这个，所以，我也只能定制些基本的页面样式。</p>

<hr/>


<p>1年前我编写了<a href="https://github.com/kevinlynx/ext-blog">ext-blog</a>，并且在我的VPS上开启了codemacro.com这个博客。本来，它是一个ext-blog很好的演示例子，但维护这个博客给我带来诸多不便。例如，每次发布文章我都需要使用更早前用lisp写的cl-writer，我为什么就不愿意去做更多的包装来让cl-writer更好用？这真是一个垃圾软件，虽然它是我写的。另一方面，codemacro.com使用的主题，虽然是我抄的，但依然太丑，并且恶心。</p>

<p>更别说那个消耗我VPS所有内存的lisp解释器，以及那恶心的两位数字乘法的验证码&#8212;你能想象别人得有多强烈的留言欲望，才愿意开一个计算器？</p>

<hr/>


<p>说说codertrace.com。我其实写了篇关于codertrace.com的总结，但没有作为博客发布。做这个事情的结果，简单总结来说就是瞎JB折腾没有任何结果。我真的是个苦逼双子男，我每次做件事情都需要巨大的毅力才能让自己专注下去。</p>

<p>整个过程中，收到了些网友的邮件，看到了些评论，虽然不多。邮件/评论中有建议的，也有单纯的交流的，也有单纯鼓励的。我想说的是，thanks guys。</p>

<hr/>


<p>Anyway, try Github Page, save your VPS money :D.</p>

<hr/>


<p><strong>update</strong></p>

<p>具体的搭建步骤，其实Github Page以及Jekyll的帮助文档中其实已经有说明。而Jekyll-bootstrap给了更为详细的说明：</p>

<ul>
<li><a href="http://jekyllbootstrap.com/index.html#start-now">安装</a></li>
<li><a href="http://jekyllbootstrap.com/usage/jekyll-quick-start.html">发布</a></li>
</ul>


<p>其大概步骤，差不多为：</p>

<ul>
<li>Github上创建一个repository</li>
<li>安装jekyll（这是一个ruby gem），这是为了本地预览</li>
<li>clone Jekyll-bootstrap到你刚创建的repository</li>
<li>在_post目录下创建日志</li>
<li>提交日志到Github</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写了个简单的网站，codertrace.com]]></title>
    <link href="http://kevinlynx.github.com/codemacro/2012/02/04/codertrace/"/>
    <updated>2012-02-04T00:00:00+08:00</updated>
    <id>http://kevinlynx.github.com/codemacro/2012/02/04/codertrace</id>
    <content type="html"><![CDATA[<h2>简介</h2>

<p>因为写 <a href="https://github.com/kevinlynx/ext-blog">ext-blog</a>
的原因，慢慢喜欢上github_ 。然后突然有一天产生了一个想法：如果可以把自己的博客_ 和
<a href="https://github.com/kevinlynx">github主页</a>
集中到一块展示给别人，会不会是一种很方便的自我简介方式？然后我就动手写了
<a href="http://codertrace.com">codertrace.com</a> 。</p>

<p>所以， <a href="http://codertrace.com">codertrace.com</a>
这个网站的作用就是用来集中让程序员炫耀的。它通过RSS抓取，将你的博客，github主页，或其他有RSS输出的信息集中到一块展示给别人。这些信息通常就可以代表一个程序员。</p>

<p>如果你是程序员，也不妨试试。</p>

<p><img src="http://kevinlynx.github.com/codemacro/assets/res/codertrace/codertrace.png" alt="image" width="100%"/></p>

<h2>技术信息</h2>

<p>不知道哪个王八蛋说的，程序员每一年得学一门新语言。我2010年末接触了Lisp，然后莫名其妙地写了
<a href="https://github.com/kevinlynx/ext-blog">ext-blog</a>
，又莫名其妙地在2011年末接触了Ruby。因为大学期间太痴迷C++，我勤奋努力，几乎通晓这门语言的各种细节；后来又稍微实践了下编译原理。在这若干年间，断断续续也接触过其他脚本类语言，我甚至在android上用java写过几个
<a href="http://kevinlynx.iteye.com">小应用</a>
。基于这些积累，我发现我可以很快上手Ruby，然后再上手Rails，然后就有了
<a href="http://codertrace.com">codertrace.com</a> （当然还做过一些小的
<a href="http://klquiz.heroku.com">APP</a> )</p>

<p>所以， <a href="http://codertrace.com">codertrace.com</a> 就是一个Ruby on
Rails的应用。当我用这货来做WEB的时候，我才发现曾经用Lisp写博客是多么geek。这种感觉就像你在用汇编写一个GUI程序一样。我的意思是，ruby/rails的世界里有太多现成的东西，但lisp的世界里没有。</p>

<p>而且，ruby是一个很爽的语言。我太喜欢它的closure语法，简洁，不需要加其他关键字就可以构造（例如其他语言map(function
(item) xxxx end)，或者map(lambda (item) xxx
)）。但我不喜欢在使用的地方通过yield去调用&#8212;这就像一个hack。我更不喜欢ruby用proc去封装closure。好吧，这其实是我自我分裂，为什么我要把ruby看成一个函数式语言？</p>

<p>脚本语言真是太酷了。</p>

<h2>服务器信息</h2>

<p>我很穷。不管你信不信，我真的舍不得花1000RMB买个VPS来架设
<a href="http://codertrace.com">codertrace.com</a> 。目前，
<a href="http://codertrace.com">codertrace.com</a> 架设在
<a href="http://heroku.com">heroku.com</a> ，而且还使用的是免费服务。免费服务竟然只有5M数据库。
<a href="http://codertrace.com">codertrace.com</a>
后台为了异步抓取用户提供的RSS，还使用了一个单独的进程(delayed_job ruby gem)。这也不是免费的。</p>

<p>但ruby的世界里有太多现成的东西了，甚至有很多现成的库解决这里的两个问题：heroku_external_db，这个gem可以让codertrace使用heroku以外的数据库，然后我就在我的VPS上搭了个mysql，这下流量和网站响应速度悲剧了啊，你想你请求个页面，这个页面直接涉及到若干条数据库查询。而这些查询的请求和回应竟然是通过internet网络传输的。</p>

<p>workless，这个gem可以在有异步任务时，例如codertrace上读取RSS，就会自动开启这个worker进程，然后heroku开始计费，当没有任务时，它又自动关闭这个进程。虽然省了美元，但再一次让网站的响应速度打了折扣。</p>

<p>为了实现自定义域名，我需要将 <a href="http://codertrace.com">codertrace.com</a> 指向
<a href="http://heroku.com">heroku.com</a>
提供的IP。但也许你会同我一样愤怒，因为它提供的几个IP都被GFW墙了！所以，目前的实现方案是，我将
<a href="http://codertrace.com">codertrace.com</a>
指向了我博客对应的VPS，然后在VPS上使用nginx反向代理到 <a href="http://heroku.com">heroku.com</a>
提供的IP。即使如此，我最近甚至发现 <a href="http://codertrace.com">codertrace.com</a>
竟然神奇般地会域名解析错误，难道godaddy的name server也要被GFW和谐？？</p>

<h2>故事</h2>

<p>作为一个宅男，在工作的若干年中，若干个假期我都用来打游戏，或者写程序。</p>

<p>所以，当这个成为习惯的时候， <a href="http://codertrace.com">codertrace.com</a>
，就顺理成章地消费了我今年的春节假期。我发现一个人窝在租的小房子里写代码是件很爽的事情。在当前这个社会环境下，你可以专注地去干件喜欢的事情，还不用处理各种生活琐事，真是太爽了。</p>

<p>但为什么我平时得不到这种感觉？因为，我，是一个没钱的程序员。我和我老婆租在一个标间里。在这样狭小的空间里，多个人就是多几倍干扰。这太残酷了。</p>

<h2>末了</h2>

<p>曾经我以为我很牛逼，曾经我以为程序员很牛逼。后来我慢慢发现自己很垃圾。我没有写出来过牛逼的程序，大概也没能力写。还记得那个程序员的故事吗？就是有个傻逼也以为程序员很牛逼，但不幸在一家非IT公司的IT部门工作，他的程序员同事的工作就是每周填个excel表格。他后来很绝望，因为他没有为世界贡献过任何代码。后来，这货丢下一切，坐上去某地的飞机走了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Lisp搭建独立博客]]></title>
    <link href="http://kevinlynx.github.com/codemacro/2011/09/29/build-blog-by-lisp/"/>
    <updated>2011-09-29T00:00:00+08:00</updated>
    <id>http://kevinlynx.github.com/codemacro/2011/09/29/build-blog-by-lisp</id>
    <content type="html"><![CDATA[<p>本文描述如何使用Lisp工具集搭建一个完整的个人博客站点。一个搭建好的例子站点可以参看我的个人博客：http://codemacro.com。</p>

<p>要搭建一个独立博客，需要两方面的支持。一是博客软件，二是根据选择的博客软件取得必须的“硬件“。例如我这里使用的是Lisp工具集，就需要一个可以完全控制的服务器，所以这里我需要一个VPS。当然，购买一个合适的域名也是必须的。以下将针对这些内容做描述。</p>

<h2>获取VPS及域名</h2>

<p>VPS提供商国内国外都有很多。我选择的是 <a href="http://www.rapidxen.net/">rapidxen</a>
，128M内存，1年70来美元，算是国外比较便宜的，速度上还过得去。</p>

<p>购买了VPS后，可以进入后台管理页面安装VPS操作系统。同样，因为我使用的是Lisp，我选择安装了Debian 6.0 squeeze
(minimal)64位。实际上我更倾向于32位，因为我的PC系统就是32位，方便测试。安装系统非常简单，基本随意设置下即可。值得注意的是，除了修改root密码外，最好修改下ssh端口，具体设置方法可以另行搜索。此外，因为后面我会使用nginx作为HTTP前端服务器，为了方便安装nginx，最好更新下软件源列表，编辑etc/apt/source.list:</p>

<pre><code>deb http://ftp.us.debian.org/debian squeeze main
deb http://packages.dotdeb.org stable all
deb-src http://packages.dotdeb.org stable all
deb http://php53.dotdeb.org stable all
deb-src http://php53.dotdeb.org stable all
</code></pre>

<p>购买VPS最主要的，就是获取到一个独立IP，如图：</p>

<p><img src="http://kevinlynx.github.com/codemacro/assets/res/build_blog/vps.png" alt="image" /></p>

<p>然后可以去购买域名。同样，也有很多域名服务商。这里我选择的是 <a href="http://www.godaddy.com/">godaddy</a>
，我选择的域名codemacro.com一年11美元。购买了域名后，就需要将域名和VPS
IP关联起来。详细设置也可以另行搜索。这里简要提下：在成功登入godaddy后，选择My Account，进入自己的域名，选择DNS
Manager，然后添加域名映射即可，如图：</p>

<p><img src="http://kevinlynx.github.com/codemacro/assets/res/build_blog/domain.png" alt="image" /></p>

<p>通过以上设置后，你购买的域名就成功指向你购买的VPS地址了。可以通过ping来观察是否指向成功。</p>

<h2>使用Lisp构建博客系统</h2>

<p>要在VPS上安装软件，首先需要SSH上你的VPS，例如：ssh -p 1234
<a href="mailto:root@codemacro.com">root@codemacro.com</a>。</p>

<p>这里使用的软件集包括：</p>

<ul>
<li>nginx，Web服务器</li>
<li><a href="http://www.sbcl.org">SBCL</a> ，Lisp编译器实现</li>
<li><a href="http://www.quicklisp.org/">quicklisp</a> ，可以方便自动下载、安装Lisp库的工具</li>
<li><a href="http://weitz.de/hunchentoot/">hunchentoot</a>
，Lisp实现的Web服务器（不用特意安装）</li>
<li><a href="http://codemacro.com/view/8">ext-blog</a> ，Lisp实现的博客系统</li>
</ul>


<p>实际上，可以完全使用Lisp作为Web服务器，但我担心效率问题（对个人博客而言完全没这回事），所以使用了nginx作为Web服务器前端，将hunchentoot放在后面。</p>

<h3>安装nginx</h3>

<p>在设置好debian软件源后，安装非常简单:</p>

<pre><code>apt-get install nginx
</code></pre>

<p>安装完后，因为要将HTTP请求转发给Lisp服务器，所以需要修改下配置:</p>

<pre><code>vi /etc/nginx/sites-avaiable/default
</code></pre>

<p>将/请求派发给Lisp服务器（假设监听于8000端口）:</p>

<pre><code>location / {
    proxy_pass http://127.0.0.1:8000;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
}
</code></pre>

<p>然后可以启动nginx了:</p>

<pre><code>nginx
</code></pre>

<p>这个时候通过浏览器访问，会得到503 bad gateway的错误提示，因为hunchentoot还没开启。</p>

<h3>安装Lisp相关软件</h3>

<p><a href="http://www.sbcl.org">SBCL</a> 同样可以通过apt直接安装:</p>

<pre><code>apt-get instal sbcl
</code></pre>

<p>装好SBCL后，就可以进一步安装 <a href="http://www.quicklisp.org/">quicklisp</a>
。可以完全遵守quicklisp官方给的安装方法进行安装。大概就是先获取quicklisp.lisp文件，然后在SBCL中载入，根据提示即可。这里不再赘述。</p>

<p>安装好quicklisp后，就可以使用它安装很多Lisp软件/库了。quicklisp在安装一个Lisp库时，会自动下载并安装依赖库，就像apt-get一样。因为ext-blog并未收入到quicklisp的软件列表里，所以ext-blog需要手动安装。首先，在本地（非VPS上）获取ext-blog源码:</p>

<pre><code>git clone git://github.com/kevinlynx/ext-blog.git
</code></pre>

<p>进入到ext-blog目录。该目录下有几个方便的脚本可以用于博客管理。首先将ext-blog打包并上传到VPS上，例如:</p>

<pre><code>./upload-dist.sh root@codemacro.com 1234 /home/test
</code></pre>

<p>该脚本会调用make-dist.sh将ext-blog全部源码打包，然后使用scp拷贝该文件及update-blog.sh到VPS指定的目录里（这里是/home/test），然后ssh上VPS。期间会两次输入VPS系统的密码。然后以下操作将在VPS上完成。</p>

<p>首先进入到刚才拷贝文件的目录:</p>

<pre><code>cd /home/test
</code></pre>

<p>解压ext-blog.tar.gz:</p>

<pre><code>tar xvf ext-blog.tar.gz
</code></pre>

<p>然后ext-blog被解压到/home/test/dist目录。进入此目录运行SBCL:</p>

<pre><code>cd dist
sbcl
</code></pre>

<p>ext-blog目录下dep.lisp会使用quicklisp安装依赖库，进入SBCL后，载入该文件即可安装所有依赖库，这可能需要一点时间:</p>

<pre><code>(load "dep.lisp")
</code></pre>

<p>在没有其他问题下，可以暂时退出SBCL完成一些其他准备工作。</p>

<p>ext-blog在最近的版本中加入了验证码生成功能，这需要一个pcf字体文件。因为字体文件一般较大，所以upload-dist.sh脚本并没有将该字体文件打包，所以这里需要手动复制，同样在本地的ext-blog目录下:</p>

<pre><code>scp -P 1234 data/wenquanyi_12ptb.pcf root@codemacro.com:/home/test/dist/data/
</code></pre>

<p>另外，因为需要将Lisp解释器放置在系统后台执行，避免关掉SSH会话后终止SBCL进程，所以这里需要个工具gnu
screen。可以使用apt-get来安装:</p>

<pre><code>apt-get install screen
</code></pre>

<p>然后，一切就OK了。在VPS上可以使用ext-blog目录下的run-blog.sh来运行这个博客（首先确定VPS上的nginx开启）:</p>

<pre><code>./run-blog.sh
</code></pre>

<p>该脚本会使用screen在后台开启一个SBCL进程，并自动载入ext-blog，然后在8000端口上开启HTTP服务。这个启动过程可能会使用几十秒的时间，直接ctrl+z退出screen，这并不终止SBCL。一段时间后便可在浏览器里测试。</p>

<h3>设置博客</h3>

<p>如果一切正常，此时通过浏览器访问你的站点时，会被重定向到一个博客初始化页面，如下：</p>

<p><img src="http://kevinlynx.github.com/codemacro/assets/res/build_blog/initblog.png" alt="image" /></p>

<p>上图中我是在本机测试的，所以域名是localhost，希望不至于产生误解。初始化仅需输入用户名和密码即可，以后可通过该用户名和密码进入博客后台管理页面。完成这一步后，就可以进入博客后台管理页面做更多的设置，例如博客标题等。</p>

<p>ext-blog的管理页面使用了emlog博客系统的CSS及其他资源，因此有同学觉得管理页面很面熟就不奇怪了。ext-blog提供在线编辑博客功能，同时也支持简单的metaweblog
API，因此可以使用一些博客客户端来发表文章（仅测过我自己写的博客客户端cl-writer）。</p>

<h2>最后</h2>

<p>本文描述较为粗略，主要是很多细节我自己也记不清。如有问题可以发邮件给我。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[传递Lua函数到C/C++中]]></title>
    <link href="http://kevinlynx.github.com/codemacro/2011/05/09/lua-function-arg/"/>
    <updated>2011-05-09T00:00:00+08:00</updated>
    <id>http://kevinlynx.github.com/codemacro/2011/05/09/lua-function-arg</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<p>在Lua中，因为函数也是第一类值，所以会出现将函数作为另一个函数的参数，或者函数作
为函数的返回值。这种机制在很多地方都能代码更灵活更简洁，例如:</p>

<div class="highlight"><pre><code class="lua">    <span class="nb">table.sort</span><span class="p">(</span><span class="n">table</span> <span class="p">[,</span><span class="n">comp</span><span class="p">])</span>
</code></pre>
</div>


<p>这里的comp就要求传入一个函数，我们在调用时，大概会有如下形式:</p>

<div class="highlight"><pre><code class="lua">    <span class="nb">table.sort</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">comp</span><span class="p">)</span> <span class="c1">-- 直接写函数名</span>
    <span class="nb">table.sort</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">local_comp</span><span class="p">)</span> <span class="c1">-- 某个局部函数</span>
    <span class="nb">table.sort</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="n">xxx</span> <span class="k">end</span> <span class="p">)</span> <span class="c1">-- 临时构造一个匿名函数</span>
</code></pre>
</div>


<p>其中最后一种方式最为灵活，任意时候在需要的时候构造一个匿名函数。这种在Lua自身的
环境中使用，自然没有问题。但是，当我们在C/C++中注册一些函数到Lua环境中，而这些 函数也需要使用函数参数的时候，问题就出来了。</p>

<!-- more -->


<p>Lua本身是不支持将Lua函数作为函数参数传入C/C++的，不管这个想要传入的函数是全局的
、局部的、或者匿名的（匿名的本质上也算局部的）。一般情况下，我们唯一的交互方式，
不是传入一个函数，而是一个全局函数名。C/C++保存这个函数名，在需要回调Lua的时候，
就在Lua全局表中找到这个函数（根据函数名），然后再调用之。情况大致如下:</p>

<div class="highlight"><pre><code class="lua">    <span class="k">function</span> <span class="nf">lua_func</span> <span class="p">()</span> <span class="n">xxx</span> <span class="k">end</span>
    <span class="n">cfunc</span><span class="p">(</span><span class="n">lua_func</span><span class="p">)</span> <span class="c1">-- wrong</span>
    <span class="n">cfunc</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">lua_func&quot;</span><span class="p">)</span> <span class="c1">-- right</span>
</code></pre>
</div>


<p>我们这回的脚本模块，策划会大量使用需要回调函数的C/C++函数。显然，创建大量的全局 函数，先是从写代码的角度看，就是很伤神的。</p>

<h2>解决</h2>

<p>我们最终需要的方式，大概如下:</p>

<div class="highlight"><pre><code class="lua">    <span class="n">cfunc</span><span class="p">(</span><span class="n">lua_func</span><span class="p">)</span> <span class="c1">-- ok</span>
    <span class="n">cfunc</span><span class="p">(</span><span class="k">function</span> <span class="p">()</span> <span class="n">xxx</span> <span class="k">end</span><span class="p">)</span> <span class="c1">-- ok</span>
    <span class="kd">local</span> <span class="n">xxx</span> <span class="o">=</span> <span class="k">function</span> <span class="p">()</span> <span class="n">xxx</span> <span class="k">end</span>
    <span class="n">cfunc</span><span class="p">(</span><span class="n">xxx</span><span class="p">)</span> <span class="c1">-- ok</span>
</code></pre>
</div>


<p>要解决这个问题，我的思路是直接在Lua层做一些包装。因为C/C++那边仅支持传入一个全局
函数名（当然不一定得全局的，根据实际情况，可能在其他自己构造的表里也行），也就是
一个字符串，所以我的思路就是将Lua函数和一个唯一的字符串做映射。:</p>

<div class="highlight"><pre><code class="lua">    <span class="k">function</span> <span class="nf">wrap</span> <span class="p">(</span><span class="n">fn</span><span class="p">)</span>
        <span class="kd">local</span> <span class="n">id</span> <span class="o">=</span> <span class="n">generate_id</span><span class="p">()</span>
        <span class="kd">local</span> <span class="n">fn_s</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">__callback_fn&quot;</span><span class="p">..</span><span class="n">id</span>
        <span class="nb">_G</span><span class="p">[</span><span class="n">fn_s</span><span class="p">]</span> <span class="o">=</span> <span class="n">fn</span>
        <span class="k">return</span> <span class="n">fn_s</span>
    <span class="k">end</span>
</code></pre>
</div>


<p>这个wrap函数，就是将一个函数在全局表里映射到一个字符串上，那么在使用时:</p>

<div class="highlight"><pre><code class="lua">    <span class="n">cfunc</span><span class="p">(</span><span class="n">wrap</span><span class="p">(</span><span class="k">function</span> <span class="p">()</span> <span class="n">xxx</span> <span class="k">end</span><span class="p">))</span>
    <span class="n">cfunc</span><span class="p">(</span><span class="n">const</span> <span class="n">char</span> <span class="o">*</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">xxx</span><span class="p">);</span> <span class="c1">-- cfunc的原型</span>
</code></pre>
</div>


<p>cfunc是C/C++方注册进Lua的函数，它的原型很中规中矩，即：只接收一个函数名，一个字
符串，如之前所说，C/C++要调用这个回调函数时，就根据这个字符串去查找对应的函数。
脚本方在调用时，如果想传入一个匿名函数了，就调用wrap函数包装一下即可。</p>

<h2>一个改进</h2>

<p>上面的方法有个很严重的问题，在多次调用wrap函数后，将导致全局表也随之膨胀。我们需
要想办法在C/C++完成回调后，来清除wrap建立的数据。这个工作当然可以放到C/C++来进行
，例如每次发生回调后，就设置下全局表。但这明显是不对的，因为违背了接口的设计原则
，这个额外的机制是在Lua里添加的，那么责任也最好由Lua来负。要解决这个问题，就可以
使用Lua的metamethods机制。这个机制可以在Lua内部发生特定事件时，让应用层得到通知。
这里，我们需要关注__call事件。</p>

<p>Lua中只要有__call metamethod的值，均可被当作函数调用。例如:</p>

<pre><code>ab(1, 2) 
</code></pre>

<p>这里这个函数调用形式，Lua就会去找ab是否有__call metamethod，如果有，则调用它。这
个事实暗示我们，一个table也可以被调用。一个改进的wrap函数如下:</p>

<div class="highlight"><pre><code class="lua">    <span class="kd">local</span> <span class="k">function</span> <span class="nf">create_callback_table</span> <span class="p">(</span><span class="n">fn</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
        <span class="kd">local</span> <span class="n">t</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">t</span><span class="p">.</span><span class="n">callback</span> <span class="o">=</span> <span class="n">fn</span>
        <span class="nb">setmetatable</span> <span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="p">{</span><span class="n">__call</span> <span class="o">=</span>  <span class="c1">-- 关注__call</span>
            <span class="k">function</span> <span class="p">(</span><span class="n">func</span><span class="p">,</span> <span class="p">...)</span> <span class="c1">-- 在t(xx)时，将调用到这个函数</span>
                <span class="n">func</span><span class="p">.</span><span class="n">callback</span> <span class="p">(...)</span> <span class="c1">-- 真正的回调</span>
                <span class="n">del_callback</span> <span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="c1">-- 回调完毕，清除wrap建立的数据</span>
            <span class="k">end</span> <span class="p">})</span>
        <span class="k">return</span> <span class="n">t</span>
    <span class="k">end</span>
    
    <span class="k">function</span> <span class="nf">wrap</span> <span class="p">(</span><span class="n">fn</span><span class="p">)</span>
        <span class="kd">local</span> <span class="n">id</span> <span class="o">=</span> <span class="n">generate_func_id</span><span class="p">()</span> <span class="c1">-- 产生唯一的id</span>
        <span class="kd">local</span> <span class="n">fn_s</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="s">_callback_fn&quot;</span><span class="p">..</span><span class="n">id</span>
        <span class="nb">_G</span><span class="p">[</span><span class="n">fn_s</span><span class="p">]</span> <span class="o">=</span> <span class="n">create_callback_table</span><span class="p">(</span><span class="n">fn</span><span class="p">,</span> <span class="n">fn_s</span><span class="p">)</span> <span class="c1">-- _G[fn_s]对应的是一个表</span>
        <span class="k">return</span> <span class="n">fn_s</span>
    <span class="k">end</span>
</code></pre>
</div>


<p>在我们的C/C++程序中，依然如往常一样，先是从_G里取出函数名对应的对象。虽然这个对
象现在已经是一个table。然后lua_call。</p>

<p>上面的代码是否会在原有基础上增加不可接受的性能代价？虽然我没有做过实际测试，但是 从表明看来，排除meta
table在Lua里的代价，也就多了几次Lua函数调用。</p>

<p>最后，感叹一下，Lua里的table及metatable机制，实在非常强大。这种强大不是功能堆砌
出来的强大，而是简单东西组合出来的强大。其背后的设计思想，着实让人佩服。</p>

<p><strong>4.26.2011 Update</strong></p>

<p>之前的文中说“Lua本身是不支持将Lua函数作为函数参数传入C/C++的“，这句话严格来说不
正确（由某网友评论）。假设函数cfun由c/c++注册，我们是可以编写如下代码的:</p>

<pre><code>cfunc(print) -- 传入Lua函数
</code></pre>

<p>但是问题在于，我们无法取出这个函数并保存在c/c++方。Lua提供了一些接口用于取cfunc
的参数，例如luaL_checknumber（封装lua_tonumber）。但没有类似luaL_checkfunction的
接口。Lua中的table有同样的问题。究其原因，主要是Lua中的函数没有直接的c/c++数据结 构对应。</p>

<p>;; END</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MMO游戏对象属性设计]]></title>
    <link href="http://kevinlynx.github.com/codemacro/2011/05/02/entity-property/"/>
    <updated>2011-05-02T00:00:00+08:00</updated>
    <id>http://kevinlynx.github.com/codemacro/2011/05/02/entity-property</id>
    <content type="html"><![CDATA[<p>一般的MMORPG中，游戏对象主要包括怪物和玩家。这两类对象在经过游戏性方面的不断“进化”后，其属性数量及与之相关的逻辑往往会变得很巨大。如何将这一块做得既不损失效率，又能保证结构的灵活、清晰、可维护？本文将提供一种简单的结构。</p>

<h2>原始结构</h2>

<p>最原始的结构，极有可能为这样:</p>

<pre><code>Player:     +---------------+
            | property-1    |
            +---------------+
            | property-2    |
            +---------------+
            |     ...       |
            +---------------+
            | operator-1    |
            +---------------+
            | operator-2    |
            +---------------+
            | ...           |
            +---------------+
</code></pre>

<p>也就是，一个对象为一个C++类，然后里面直接塞满了各种属性名，然后是针对这个属性的逻辑操作（函数）。其结果就是Player成为巨类。针对这个情况，一直以来我觉得可以使用一种简单的方法来拆分这个类。冠以官腔，称之为Entity-Component-based
Desgin。产生这种想法和我的个人技术积累有一定关系，见下文。</p>

<h2>Policy-based Design</h2>

<p>Policy-based Design，基于决策的设计。这个概念来源于<Modern C++
Design\>。虽然这本书讲述的是针对C++模板的使用及设计技巧。但这种思想依然被我潜意识般地用在其他地方。Policy大致来说就是一个小的组件(Component)。它努力不依赖于其他东西，它可能就是个简单的类，它拥有极少的数据结构，及针对这些数据的极少操作接口。举例而言，玩家MP的自动回复功能，就可封装为一个Policy。将许多Policy组合起来，就可完成一个复杂的功能。</p>

<p>这种思想还可指导很多程序结构方面的设计。例如在做功能的接口拆分时，就将每个函数设计得足够小，小到单纯地完成一个功能。一个功能的入口函数，就将之前实现的小函数全部组合起来，然后共同完成功能点。</p>

<p>当然，<Modern C++ Design\>里的Policy在表现形式上有所不同。但其核心思想相同，主要体现在 <strong>组合</strong>
特点上。</p>

<h2>Entity-Component-based Design</h2>

<p>Entity-Component-based
Design按照google到的文章，严格来说算是与OOP完全不同的软件设计方法。不过在这里它将按照我的意思重新被解释。</p>

<p>如果说Policy-based
Design极大可能地影响着我们平时的细节编码，那么Entity-Component则是直接对游戏对象的结构设计做直接的说明。
<strong>一个游戏对象就是一个Entity。</strong> Entity拥有很少的属性，也许仅包含一个全局标示的ID。
<strong>一个Component则是Entity的某个行为、或者说某个组成部分。</strong>
其实说白了，以玩家为例，一个玩家对象就是一个Entity，而一个MP的自动回复功能就可被包装为一个Component。这个Component可能包含若干与该功能相关的数据，例如回复时间间隔，每次的回复量等。我们往玩家对象这个Entity添加各种Component，也就是给玩家添加各种逻辑功能。</p>

<p>但是，Component之间可能会涉及到交互，玩家对象之外的模块可能也会与玩家内的某个Component交互。子功能点的拆分，不得不涉及到更多的胶水代码，这也算一种代价。</p>

<h2>游戏对象属性设计</h2>

<p>这份属性结构设计，基本就是参考了上面提到的设计思想。整个系统有如下组件:</p>

<pre><code>Entity:    +-------------------+
           | property-table    |
           +-------------------+
           | component-table   |
           +-------------------+

Property:  +-------------------+
           | observer-list     |
           +-------------------+ 

Component: +--------------------+
           | logic-related data |
           +--------------------+
           | logic-related func |
           +--------------------+
</code></pre>

<p>意即，所有Entity都包含一个属性表和组件表。这里的属性表并非硬编码的属性数据成员集合，而是一个key-value形式的表。Property包含一个观察者列表，其实就是一系列回调函数，但是这些观察者本质上也是组件，后面会提到。Component正如上文描述，仅包含Component本身实现的功能所需要的数据和函数。整个结构大致的代码如下:</p>

<pre><code>class Entity {
private:
    GUID id;
    std::map&lt;std::string, IComponent*&gt; components;
    std::map&lt;std::string, Property*&gt; properties;
};

class Property {
private:
    std::string name;
    Value val;
    std::vector&lt;IComponent*&gt; observers;
};

class IComponent {
public:
    virtual bool Operate (const Args &amp;args) { return false; }
    virtual void OnNotify (const Property &amp;property, const Args &amp;args) {}
protected:
    std::string name;
    Entity *entity;
};
</code></pre>

<p>属性本身是抽象的，这完全是因为我们将属性统一地放在了一个表里。从而又导致属性的值也需要做一个抽象包装。</p>

<p>因为Component主要是针对游戏对象属性而存在的。而针对游戏对象属性的操作，我将其分为主动操作和被动操作，其对应的组件就被称为主动组件和被动组件。这里的主被动，主要是针对这个组件是通过哪种方式启动的。如果是某个地方直接需要某个组件启动，那么称为主动，例如玩家角色刚上线，需要编码角色属性到客户端，则启动属性更新组件；如果某个组件是因为某个属性的改变而启动，则称为被动，例如当玩家受到伤害，HP非满值时，则需要启动HP自动回复组件。</p>

<p>针对组件的主被动特性，就得到主动接口Operate，被动接口OnNotify。因为不同的组件实现，依赖的启动参数可能完全不一样，所以这里对参数做了Args的封装。Args具体实现时，可以采用类继承方式根据具体应用塞入具体的参数；也可以直接使用tuple来包装不同类型不同个数的参数。</p>

<p>因为有了个被动属性，所以就在属性身上放置了一个Observer列表。当然这里不一定要采用这种细粒度的方式&#8212;将Observer绑在属性身上，而可以将observer列表放到Entity身上。接下来看一些具体的用例。</p>

<h3>具体用例</h3>

<p><strong>上线属性更新</strong></p>

<pre><code>// serialize player to client
// 取得ClientUpdater组件
IComponent *updater = entity-&gt;GetComponent ("ClientUpdater");
// 更新至client_socket客户端
updater-&gt;Operate (Args (client_socket));
</code></pre>

<p><strong>玩家属性改变</strong></p>

<pre><code>// hurt player
// 取得属性存取组件
IComponent *accessor = entity-&gt;GetComponent ("PropertyAccessor");
// 改变属性
accessor-&gt;Operate (Args ("HP", Value(10))); // decrease 10 HP
...
// dirty property updator component get called
void DirtyUpdator::OnNotify (const Property &amp;property, const Args &amp;args) {
    // 将此属性放到脏属性容器，稍候统一更新
    dirties.push (property);
}
</code></pre>

<p>代码到真正应用时，可能会加入更多的接口，以下代码情景不追加叙述。</p>

<p><strong>游戏对象刚创建</strong></p>

<pre><code>// in script, or by config file, or hard code, etc...
entity-&gt;AddProperty ("HP", Args (10)) ;
entity-&gt;AddProperty ("MP", Args (5));
... 
entity-&gt;AddComponent (componentFactory-&gt;Create ("ClientUpdater"));
entity-&gt;AddComponent (componentFactory-&gt;Create ("PropertyAccessor"));
...
</code></pre>

<p><strong>组件被创建时</strong></p>

<pre><code>ClientUpdater::ClientUpdater () {
    entity-&gt;GetProperty ("HP")-&gt;AddObserver (this);
    ...
}
</code></pre>

<p>;;END;;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多重继承和void*的糗事]]></title>
    <link href="http://kevinlynx.github.com/codemacro/2011/04/30/multi-inherit-void/"/>
    <updated>2011-04-30T00:00:00+08:00</updated>
    <id>http://kevinlynx.github.com/codemacro/2011/04/30/multi-inherit-void</id>
    <content type="html"><![CDATA[<p>C++为了兼容C，导致了不少语言阴暗面。Bjarne
Stroustrup在&lt;D&amp;E>一书里也常为此表现出无奈。另一方面，强制转换也是C++的一大诟病。但是，因为我们的应用环境总是那么“不
纯”，所以也就常常导致各种问题。</p>

<p>本文即描述了一个关于强制转换带来的问题。这个问题几年前我曾遇到过(&lt;<a href="http://www.cppblog.com/kevinlynx/archive/2008/04/24/48001.html">多线程下vc2003,vc2005对虚函数表处理的BUG？</a>>)，当时没来得及深究。深究C++的某些语法，实在是件辛苦事。所以，这里也不提过于诡异的用法。</p>

<h2>问题</h2>

<p>考虑下面非常普通的多重继承代码:</p>

<div class="highlight"><pre><code class="c"><span class="n">class</span> <span class="n">Left</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">ldisplay</span> <span class="p">()</span> <span class="p">{</span>
        <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;Left::ldisplay</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="n">class</span> <span class="n">Right</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">rdisplay</span> <span class="p">()</span> <span class="p">{</span>
        <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;Right::rdisplay</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="n">class</span> <span class="n">Bottom</span> <span class="o">:</span> <span class="n">public</span> <span class="n">Left</span><span class="p">,</span> <span class="n">public</span> <span class="n">Right</span> <span class="p">{</span>
<span class="nl">public:</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">ldisplay</span> <span class="p">()</span> <span class="p">{</span>
        <span class="n">printf</span> <span class="p">(</span><span class="s">&quot;Bottom::ldisplay</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre>
</div>


<p>这样子的代码在我们的项目中很容易就会出现，例如:</p>

<div class="highlight"><pre><code class="c"><span class="n">class</span> <span class="n">BaseObject</span><span class="p">;</span>
<span class="n">class</span> <span class="n">EventListener</span><span class="p">;</span>
<span class="n">class</span> <span class="n">Player</span> <span class="o">:</span> <span class="n">public</span> <span class="n">BaseObject</span><span class="p">,</span> <span class="n">public</span> <span class="n">EventListener</span>
</code></pre>
</div>


<p>别紧张，我当然不会告诉你这样的代码是有安全隐患的。但它们确实在某些时候会出现隐患。在我们的C++项目中，也极有可能会与一些纯C模块打交道。在C语言里，极有肯能出现以
下的代码:</p>

<div class="highlight"><pre><code class="c"><span class="k">typedef</span> <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">allocator</span><span class="p">)</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">u</span><span class="p">);</span> 
<span class="kt">void</span> <span class="n">set_allocator</span> <span class="p">(</span><span class="n">allocator</span> <span class="n">alloc</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">u</span><span class="p">);</span>
</code></pre>
</div>


<p>之所以使用回调函数，是出于对模块的通用性的考虑。而在调用回调函数时，也通常会预留一个user
data的指针，用于让应用层自由地传递数据。</p>

<p>以上关于多重继承和void*的使用中，都属于很常规的用法。但是当它们遇到一起时，事情就悲剧了。考虑下面的代码:</p>

<div class="highlight"><pre><code class="c"><span class="n">Bottom</span> <span class="o">*</span><span class="n">bobj</span> <span class="o">=</span> <span class="n">new</span> <span class="n">Bottom</span><span class="p">();</span> <span class="c1">// we HAVE a bottom object</span>
<span class="n">Right</span> <span class="o">*</span><span class="n">robj</span> <span class="o">=</span> <span class="n">bobj</span><span class="p">;</span> <span class="c1">// robj point to bobj?</span>
<span class="n">robj</span><span class="o">-&gt;</span><span class="n">rdisplay</span><span class="p">();</span> <span class="c1">// display what ?</span>
<span class="kt">void</span> <span class="o">*</span><span class="n">vobj</span> <span class="o">=</span> <span class="n">bobj</span><span class="p">;</span> <span class="c1">// we have a VOID* pointer</span>
<span class="n">robj</span> <span class="o">=</span> <span class="p">(</span><span class="n">Right</span><span class="o">*</span><span class="p">)</span> <span class="n">vobj</span><span class="p">;</span> <span class="c1">// convert it back</span>
<span class="n">robj</span><span class="o">-&gt;</span><span class="n">rdisplay</span><span class="p">();</span> <span class="c1">// display what?</span>
</code></pre>
</div>


<p>这里的输出结果是什么呢？:</p>

<div class="highlight"><pre><code class="c"><span class="n">Right</span><span class="o">::</span><span class="n">rdisplay</span> 
<span class="n">Bottom</span><span class="o">::</span><span class="n">ldisplay</span> <span class="c1">// !!!!</span>
</code></pre>
</div>


<p>由void*转回来的robj调用rdisplay时，却调用了莫名其妙的Bottom::ldisplay！</p>

<h2>多重继承类的内存布局</h2>

<p>类对象的内存布局，并不属于C++标准。这里仅以vs2005为例。上面例子中，Bottom类的内存布局大概如下:</p>

<pre><code>+-------------+
| Left_vptr   |
+-------------+
| Left data   |
+-------------+
| Right_vptr  |
+-------------+
| Right data  |
+-------------+
| Bottom data |
+-------------+
</code></pre>

<p>与单继承不同的是，多重继承的类里，可能会包含多个vptr。当一个Bottom对象被构造好时，其内部的两个vptr也被正确初始化，其指向的vtable分别为:</p>

<pre><code>Left_vptr ---&gt;  +---------------------+
                | 0: Bottom::ldisplay |
                +---------------------+

Right_vptr ---&gt; +---------------------+
                | 0: Right::rdisplay  |
                +---------------------+
</code></pre>

<h2>转换的内幕</h2>

<p><strong>类体系间的转换</strong></p>

<p>隐式转换相比强制转换而言，一定算是优美的代码。考虑如下代码的输出:</p>

<div class="highlight"><pre><code class="c"><span class="n">Bottom</span> <span class="o">*</span><span class="n">bobj</span> <span class="o">=</span> <span class="n">new</span> <span class="n">Bottom</span><span class="p">();</span>
<span class="n">printf</span> <span class="p">(</span><span class="s">&quot;%p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">bobj</span><span class="p">);</span>
<span class="n">Right</span> <span class="o">*</span><span class="n">robj</span> <span class="o">=</span> <span class="n">bobj</span><span class="p">;</span>
<span class="n">printf</span> <span class="p">(</span><span class="s">&quot;%p</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">robj</span><span class="p">);</span>
</code></pre>
</div>


<p>其输出结果可能为:</p>

<pre><code>003B5DA0
003B5DA4
</code></pre>

<p><em><em>结论就是，Right</em>robj = bobj;时，编译器返回了bobj的一个偏移地址。</em>*
从语言角度看，就是这个转换，返回了bobj中Right*的那一部分的起始地址。但编译器并不总是在bobj上加一个偏移，例如:</p>

<pre><code>bobj = NULL;
Right *robj = bobj;
</code></pre>

<p>编译器不会傻到给你一个0x00000004的地址，这简直比NULL更无理。</p>

<p><em><em>void</em>转换</em>*</p>

<p>编译器当然有理由做上面的偏移转换。那是因为在编译阶段，编译器就知道bobj和Right之间的关系。这个偏移量甚至不需要在运行期间动态计算，或是从某个地方取。如果你看过上面代码对应的汇编指令，直接就是:</p>

<pre><code>add eax, 4 ; 直接加 sizeof(Left)，记住，Right在Left之后
</code></pre>

<p>void<em>就没那么幸运了。void</em>和Bottom没有任何关系，所以:</p>

<pre><code>void *vobj = bobj; // vobj的地址和bobj完全相同
</code></pre>

<p>然后当你将vobj转换到一个Right*使用时:</p>

<pre><code>robj = (Right*) vobj;  // 没有偏移转换，robj == vobj == bobj
robj-&gt;rdisplay();
</code></pre>

<p>robj指向的是Bottom的起始地址，天啊，在我们学习C++时，我们可以说Bottom就是一个Left，也是一个Right，所谓的is
kind of。但这里的悲剧在于，按照上面的逻辑，我们在使用Right时，其实应该使用Bottom里Right那一部分。
<strong>但现在这个转换，却让robj指向了Bottom里Left那一部分。</strong></p>

<p>当调用 <code>robj-&gt;rdisplay</code> 时，编译器当然按照Right的内存布局，生成一个虚函数的调用指令，大概就是:</p>

<pre><code>mov vptr, robj-&gt;[0] ;; vptr在robj起始地址处
mov eax, vptr[0] ;; rdisplay在vtable中位于第一个
mov ecx, robj
call eax
</code></pre>

<p>总而言之， <code>robj-&gt;rdisplay</code>
就是使用偏移0处的值作为vptr，然后使用vptr指向的vtable中第一个函数作为调用。</p>

<p>但，robj正指向bobj的起始地址，这个地址是放置Left_vptr的地方。这个过程，使用了Left_ptr，而Left_ptr指向的vtable中，第一个函数是什么呢？:</p>

<pre><code>Left_vptr ---&gt;  +---------------------+
                | 0: Bottom::ldisplay |
                +---------------------+
</code></pre>

<p>正是Bottom::ldisplay！到这里，整个问题的原因就被梳理出来了。</p>

<p>;;END;;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅谈代码分层：构建模块化程序]]></title>
    <link href="http://kevinlynx.github.com/codemacro/2011/04/04/module-level/"/>
    <updated>2011-04-04T00:00:00+08:00</updated>
    <id>http://kevinlynx.github.com/codemacro/2011/04/04/module-level</id>
    <content type="html"><![CDATA[<p>模块化的程序是怎样的程序？我们可以说一个具有明显物理结构的软件是模块化的，例如带
插件的软件，一个完整的软件由若干运行时库共同构建；也可以说一个高度面向对象的库是
模块化的，例如图形引擎OGRE；也可以说一些具有明显层次结构的代码是模块化的。</p>

<p>模块化的软件具有很多显而易见的好处。在开发期，一个模块化的设计有利于程序员实现，
使其在实现过程中一直保持清晰的思路，减少潜伏的BUG；而在维护期，则有利于其他程序 员的理解。</p>

<p>在我看来，具有良好模块设计的代码，至少分为两种形式：</p>

<ul>
<li>整体设计没有层次之分，但也有独立的子模块，子模块彼此之间耦合甚少，这些子模块 构成了一个软件层，共同为上层应用提供服务；</li>
<li>整个库/软件拥有明显的层次之分，从最底层，与应用业务毫无相关的一层，到最顶层，
完全对应用进行直接实现的那一层，每一个相对高层的软件层依赖于更底层的软件层， 逐层构建。</li>
</ul>


<p>上述两种形式并非完全分离，在分层设计中，某一层软件层也可能由若干个独立的模块构成
。另一方面，这里也不会绝对说低层模块就完全不依赖于高层模块。这种双向依赖绝对不是 好的设计，但事实上我们本来就无法做出完美的设计。</p>

<p>本文将代码分层分为两大类：一是狭义上的分层，这种分层一般伴有文件形式上的表现；一 是广义上的分层，完全着眼于我们平时写的代码。</p>

<h2>软件分层</h2>

<p>软件分层一般我们可以在很多大型软件/库的结构图中看到。这些分层每一层本身就包含大
量代码。每个模块，每一个软件层都可能被实现为一个运行时库，或者其他以文件形式为 表现的东西。</p>

<h3>Example Android</h3>

<p>Android是Google推出的智能手机操作系统，在其官方文档中有Android的系统架构图：</p>

<p><img src="http://kevinlynx.github.com/codemacro/assets/res/module_level/android-architecture.jpg" alt="image" /></p>

<p>这幅图中很好地反映了上文中提到的软件层次。整个系统从底层到高层分为Linux kernel，
Libraries/Runtime，Application
Framework，Applications。最底层的Kernel可以说与应
用完全不相关，直到最上层的Applications，才提供手机诸如联系人、打电话等应用功能。</p>

<p>每一层中，又可能分为若干相互独立（Again，没有绝对）的模块，例如Libraries那一层 中，就包含诸如Surface
manager/SGL等模块。它们可能都依赖于Kernel，并且提供接口给 上层，但彼此独立。</p>

<h3>Example Compiler</h3>

<p>在编译器实现中，也有非常明显的层次之分。这些层次可以完全按照编译原理理论来划分。 包括：</p>

<ul>
<li>词法分析：将文本代码拆分为一个一个合法的单词</li>
<li>语法分析：基于 <em>词法分析</em> 得到的单词流构建语法树</li>
<li>语义分析：基于 <em>语法分析</em> 得到的语法树进行语义上的检查等</li>
<li>生成器：基于 <em>语义分析</em> 结果（可能依然是语法树）生成中间代码</li>
<li>编译器：基于 <em>生成器</em> 得到的中间代码生成目标机器上的机器代码</li>
<li>链接器：基于 <em>编译器</em> 生成的目标代码链接成最终可执行程序</li>
</ul>


<p><strong>软件分层的好处之一就是对任务(task)的抽象，封装某个任务的实现细节，提供给其他 依赖模块更友好的使用接口。隔离带来的好处之一就是可轻易替换某个实现。</strong>
例如很 多UI库隔离了渲染器的实现，在实际使用过程中，既可以使用Direct X的渲染方式，也可 以使用OpenGL的实现方式。</p>

<p>但正如之前所强调，凡事没有绝对，凡事也不可过度。很多时候无法保证软件层之间就是单
向依赖。而另一些时候过度的分层也导致我们的程序过于松散，效率在粘合层之间绕来绕去 而消失殆尽。</p>

<h2>代码分层</h2>

<p>如果说软件分层是从大的方面讨论，那么本节说的代码分层，则是从小处入手。而这也更是
贴近我们日常工作的地方。本节讨论的代码分层，不像软件分层那样大。每一层可能就是 百来行代码，几个接口。</p>

<h3>Example C中的模块组织</h3>

<p>很多C代码写得少的C++程序员甚至对一个大型C程序中的模块组织毫无概念。这是对其他技 术接触少带来的视野狭窄的可怕结果。</p>

<p>在C语言的世界里，并不像某些C++教材中指出的那样，布满全局变量。当然全局变量的使
用也并不是糟糕设计的标志(goto不是魔鬼)。一个良好设计的C语言程序懂得如何去抽象、 封装模块/软件层。我们以Lua的源代码为例。</p>

<p>lua.h文件是暴露给Lua应用（Lua使用者）的直接信息源。接触过Lua的人都知道有个结构体
叫lua_State。但是lua.h中并没有暴露这个结构体的实现。因为一旦暴露了实现，使用者就
可能会随意使用其结构体成员，而这并不是库设计者所希望的。 <strong>封装数据的实现，也算 是构建模块化程序的一种方法。</strong></p>

<p>大家都知道暴露在头文件中的信息，则可能被当作该头文件所描述模块的接口描述。所以， 在C语言中任何置于头文件中的信息都需要慎重考虑。</p>

<p>相对的，我们可以在很多.c文件中看到很多static函数。例如lstate.c中的stack_init。
static用于限定其修饰对象的作用域，用它去修饰某个函数，旨在告诉：这个函数仅被当前文件（
模块）使用，它仅用于本模块实现所依赖，它不是提供给模块外的接口！
<strong>封装内部实现 ，暴露够用的接口，也是保持模块清晰的方式之一。</strong></p>

<p>良好的语言更懂得对程序员做一种良好设计的导向。但相对而言，C语言较缺乏这方面的语
言机制。在C语言中，良好的设计更依赖于程序员自己的功底。</p>

<h3>Example Java中的模块组织</h3>

<p>相较而言，Java语言则提供了模块化设计的语法机制。在Java中，如同大部分语言一样，一
般一个代码文件对应于一个代码模块。而在Java中，每个文件内只能有一个public class。 public
class作为该模块的对外接口。而在模块内部，则可能有很多其他辅助实现的class
，但它们无法被外部模块访问。这是语言提供的封装机制，一种对程序员的导向。</p>

<h3>Example OO语言中类接口设计</h3>

<p>无论在C++中，还是在Java中，一个类中的接口，都大致有各种访问权限。例如public、
private、protected。访问权限的加入旨在更精确地暴露模块接口，隐藏细节。</p>

<p>在C中较为缺乏类似的机制，但依然可以这样做。例如将结构体定义于.c文件中，将非 接口函数以static的方式实现于.c文件中。</p>

<p>OO语言中的这些访问权限关键字的应用尤为重要。C++新手们往往不知道哪些成员该public
，哪些该private。C++熟手们在不刨根挖底的情况下，甚至会对每个数据成员写出get/set
接口（那还不如直接public）。在public/private之间，我们需要做的唯一决策就是，哪些
数据/操作并非外部模块所需。如果外部模块不需要，甚至目前不需要，那么此刻，都不要
将其public。一个public信息少的class，往往是一个被使用者更喜欢的class。</p>

<p>（至于protected，则是用于继承体系之间，类之间的信息隐藏。）</p>

<h3>Example Lisp中的模块设计</h3>

<p>又得提提Lisp。</p>

<p>基于上文，我们发现了各种划分模块、划分代码层的方式，无论是语言提供，还是程序员自 己的应用。但是如何逐个地构建这些层次呢？</p>

<p>Lisp中倡导了一种更能体现这种将代码分层的方式：自底而上地构建代码。这个自底而上，
自然是按照软件层的高低之分而言。这个过程就像上文举的编译原理例子一样。我们先编写
词法分析模块，该模块可能仅暴露一个接口：get-token。然后可以立马对该模块进行功能
测试。然后再编写语法分析模块，该模块也可能只暴露一个接口：parse。语法分析模块建
立于词法分析模块之上。因为我们之前已经对词法分析模块进行过测试，所以对语法分析的 测试也可以立即进行。如此下去，直至构建出整个程序。</p>

<p>每一个代码层都会提供若干接口给上层模块。越上层的模块中，就更贴近于最终目标。每一
层都感觉是建立在新的“语言“之上。按照这种思想，最终我们就可以构建出DSL，即Domain Specific Language。</p>

<h3>分层的好处</h3>

<p>基于以上，我们可以总结很多代码分层的好处，它们包括（但不限于）：</p>

<ul>
<li>隐藏细节，提供抽象，隐藏的细节包括数据的表示（如lua_State）、功能的实现</li>
<li>在新的一层建立更高层的“语言”</li>
<li>接口清晰，修改维护方便</li>
<li>方便开发，将软件分为若干层次，逐层实现</li>
</ul>


<h3>一个问题的解决</h3>

<p>有时候，我们的软件层很难做到单向依赖。这可能是由于前期设计的失误导致，也可能确实
是情况所迫。在很多库代码中，也有现成的例子。一种解决方法就是通过回调。回调的实现
方式可以是回调函数、多态。多态的表现又可能是Listener等模式。</p>

<p>所有这些，主要是让底层模块不用知道高层模块。在代码层次上，它仅仅保存的是一个回调
信息，而这个信息具体是什么，则发生在运行期（话说以前给同事讲过这个）。这样就简单 避免了底层模块依赖高层模块的问题。</p>

<h2>END</h2>

<p>精确地定义一个软件中有哪些模块，哪些软件层。然后再精确地定义每个模块，每个头文件
，每个类中哪些信息是提供给外部模块的，哪些信息是私有的。这些过程是设计模块化程 序的重要方式。</p>

<p>但需要重新强调的是，过了某个度，那又是另一种形式的糟糕设计。但其中拿捏技巧，则只 能靠实践获取。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lisp实践：开发RSS阅读器]]></title>
    <link href="http://kevinlynx.github.com/codemacro/2011/03/30/lisp-rss/"/>
    <updated>2011-03-30T00:00:00+08:00</updated>
    <id>http://kevinlynx.github.com/codemacro/2011/03/30/lisp-rss</id>
    <content type="html"><![CDATA[<h1>一、RSS阅读器的实现</h1>

<p>RSS Reader的实现并不像它看上去那么复杂。当初在决定写这个作为Lisp练习时，甚至觉得
没有多少内容可做。其简单程度甚至用不了你启动一个慢速IDE的时间:D。对Lisp无兴趣的 TX只需要读完这一节即可，</p>

<h2>什么是RSS阅读器?</h2>

<p>RSS在实现上，可以说是XML的又一次扩张式的应用。因为RSS最重要的东西就是一个XML文件
。RSS主要用于Web中的内容同步。例如我们写的博客，门户网站的新闻，都是内容。Web服
务器将这些内容组织成XML，然后我们通过一个客户端来解析这些XML，就可以在不用直接访 问网站的情况下获取信息：
<img src="http://kevinlynx.github.com/codemacro/assets/res/lisp_rss/rss-overview.png" alt="rss overview" /></p>

<p>RSS阅读器就是这样一个从Web服务器通过RSS（表现形式为XML）来获取信息内容的工具。它
可以被实现为一个独立的客户端程序，也可以实现为像Google Reader这种网页形式。后者
其核心功能其实是Google服务器在做，取得信息后再发给用户。</p>

<h2>RSS文件</h2>

<p>上已提及，RSS的实现其实就是个XML文件。这个XML文件格式非常简单，例如:</p>

<div class="highlight"><pre><code class="xml"><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
<span class="nt">&lt;rss</span> <span class="na">version=</span><span class="s">&quot;2.0&quot;</span><span class="nt">&gt;</span>
   <span class="nt">&lt;channel&gt;</span>
      <span class="nt">&lt;title&gt;</span>Liftoff News<span class="nt">&lt;/title&gt;</span>
      <span class="nt">&lt;link&gt;</span>http://liftoff.msfc.nasa.gov/<span class="nt">&lt;/link&gt;</span>
      <span class="nt">&lt;description&gt;</span>Liftoff to Space Exploration.<span class="nt">&lt;/description&gt;</span>
      <span class="nt">&lt;item&gt;</span>
         <span class="nt">&lt;title&gt;</span>Star City<span class="nt">&lt;/title&gt;</span>
         <span class="nt">&lt;link&gt;</span>http://liftoff.msfc.nasa.gov/news/2003/news-starcity.asp<span class="nt">&lt;/link&gt;</span>
         <span class="nt">&lt;description&gt;</span>Oh no, you wrote another blog!<span class="nt">&lt;/description&gt;</span>
      <span class="nt">&lt;/item&gt;</span>
    <span class="nt">&lt;/channel&gt;</span>
<span class="nt">&lt;/rss&gt;</span>
</code></pre>
</div>


<p>我们身边到处都是RSS文件，例如
<a href="http://www.cppblog.com/rss.aspx">http://www.cppblog.com/rss.aspx</a>
。RSS文件的框架大 致为:</p>

<pre><code>&lt;rss&gt;
    &lt;channel&gt;
        &lt;item&gt;
        &lt;/item&gt;
        &lt;item&gt;
        &lt;/item&gt;
        ...
    &lt;/channel&gt;
&lt;/rss&gt;
</code></pre>

<p>对，其框架就是这样，一个channel节点，其下若干个item节点。举例来说，
<strong>CPPBLOG首页就 是一个channel，该channel下有若干原创文章，每篇文章就是一个item。</strong> 无论是channel
，还是item，都会有很多属性，例如title/description/link，有些属性是RSS规范里要求
必须有的，有的是可选的。</p>

<h2>交互过程</h2>

<p>那么，服务器和客户端是如何交互的呢？首先，服务器上的程序针对其某个页面，生成对应
的RSS文件。这个RSS文件基本上是有固定的URL的。客户端每次获取内容时，就从这个固定
的URL获取这个RSS文件。客户端获取到这个RSS文件后，解析之，再呈现给用户。这就是整
个过程。这个过程中客户端与服务器的交互，全部是正常的HTTP请求。</p>

<p>而RSS阅读器，如果做得足够简单，则只需要从指定的地方获取到RSS文件，然后解析这个 XML文件，然后以相对友好的形式显示即可。</p>

<h2>扩展</h2>

<p>虽然RSS阅读器在核心功能上很简单，但是作为一个可以使用的工具，依然有很多功能点需 要实现。基本功能包括：</p>

<ul>
<li>记录用户关注的RSS</li>
<li>缓存某个RSS过去一段时间更新的内容</li>
<li>对HTTP回应的处理，最重要的就是重定向处理</li>
</ul>


<p>我们还可以做很多扩展，例如Google Reader之类的在线RSS阅读器。这些阅读器的RSS抓取
功能做在服务器端，它们除了上面提到的基础功能外，还会包含内容分类，给内容打一些 标签，分析用户的订阅习惯然后推荐类似的内容等等。</p>

<h1>二、Lisp实现</h1>

<p>本节描述在Lisp中实现上文的内容。主要包括： <strong>通过HTTP请求获取到RSS文件、解析RSS文件 。</strong></p>

<h2>获取RSS文件</h2>

<p>Lisp虽然历史悠久，但其扩展库标准却做得很拙劣。偏应用级的扩展库要么由编译器实现提
供，要么就得自己在网上找。一方面使用者希望库使用起来方便，另一方面库开发者在跨编 译器实现方面也头疼不已。所幸现在有了quick
lisp，安装第三方库就像Ubuntu里安装软件 一样简单（大部分）。</p>

<p>socket支持就是面临的第一个问题。不过我这里并不考虑跨编译器实现的问题，直接使用 SBCL里的socket接口。</p>

<p>要获取RSS文件，只需要连接Web服务器，发起HTTP的GET请求即可。当然，建立TCP连接，组
建HTTP请求包，就不是这里的讨论了。我们还是拿CPPBLOG首页的RSS为例，该RSS的URL为:</p>

<pre><code>http://www.cppblog.com/rss.aspx
</code></pre>

<p>拆分一下，得到host为www.cppblog.com（即我们要connect的地址），rss的uri为
/rss.aspx（即HTTP请求里的文件URI），于是建立HTTP请求包:</p>

<pre><code>GET /rss.aspx HTTP/1.0
Host: www.cppblog.com
</code></pre>

<p>关于HTTP请求的一些基础知识，可以参考我很早前写的一篇博客：&lt;<a href="http://www.cppblog.com/kevinlynx/archive/2008/07/30/57521.aspx">实现自己的http服务器</a>>。
正常情况下，Web服务器就会返回RSS的文件内容。然后我们就可以继续解析。</p>

<h2>解析RSS</h2>

<p>RSS本身是一个XML格式的文件。之前连接Web服务器发起HTTP请求没有用到第三方库，但是
解析XML文件不是几十来行代码能搞定的事情，所以这里需要选用一个第三方库。</p>

<p>我用的是s-xml，这个库在我之前的
<a href="http://www.cppblog.com/kevinlynx/archive/2011/03/13/141713.aspx">关于Lisp的文章</a>
中提到过。s-xml与我之前在C++ 领域见到的XML解析库最大的不同点在于，它提供的API是基于事件模式的。意思是说，你不
要去查询某个element的值是多少，当我解析到的时候会告诉你。事件模式的编程方式自然 离不开回调函数:</p>

<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nv">s-xml:start-parse-xml</span> 
  <span class="nc">stream</span>
  <span class="p">(</span><span class="nb">make-instance</span> <span class="ss">&#39;s-xml:xml-parser-state</span>
                 <span class="ss">:new-element-hook</span> <span class="nf">#&#39;</span><span class="nv">decode-rss-new-element</span>
                 <span class="ss">:finish-element-hook</span> <span class="nf">#&#39;</span><span class="nv">decode-rss-finish-element</span>
                 <span class="ss">:text-hook</span> <span class="nf">#&#39;</span><span class="nv">decode-rss-text</span><span class="p">)))</span>
</code></pre>
</div>


<p>与s-xml交互的也就是上面代码里提到的三个函数：new-element-hook, finish-element-hook ,
text-hook。这种类型的接口导致解析代码大量减少，但不利于理解。我们要在整个解析
过程中传递数据，需要通过与s-xml交互的函数参数（当然不会蠢到去用全局变量）。</p>

<p>解析过程中通过往函数参数指定的对象身上塞数据完成，整个解析实现也就几十行代码。 文章尾可下载代码看看。</p>

<h2>显示出来</h2>

<p>通过上面两步，我们得到了RSS文件、解析出了具体内容，最后一步就是呈现出来看看。RSS
文件里每个Item都是一篇文章（新闻之类），这个文章内容可直接包含HTML标记，说白了，
这些内容就是直接的HTML内容。要显示这些内容，最简单的方法就是把一个RSS转换成一种 简单的HTML文件，以供阅读。</p>

<p>这里就涉及到HTML generator，几乎所有的Lisper都会写一个HTML产生器（库）（虽然目前
我还没写）。这种库的作用就是方便地输出HTML文件。</p>

<p>Lisp相对于其他语言很大的一个特点，或者说是优点，就是其语言本身的扩展能力。这种扩
展不是简单的添加几个函数，也不是类，而是提供一些就像语言本身提供的特殊操作符一样 的东西。而HTML
generator正是这种东西大放异彩的地方。这种感觉有点像在C++中通过模
板造出各种增强语言特性的东西一样（例如boost/loki）。</p>

<p>因为我这里只是输出简单的HTML文件，何况我对HTML的标记了解的也不多，也懒得再花经历 。所以我暂时也就将就了些土方法:</p>

<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nb">with-output-to-string</span> <span class="p">(</span><span class="nc">stream</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">channel</span> <span class="p">(</span><span class="nv">rss-channel</span> <span class="nv">rss</span><span class="p">)))</span> <span class="c1">;取出channel对象</span>
   <span class="p">(</span><span class="nb">format</span> <span class="nc">stream</span> <span class="s">&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;~a&lt;/title&gt;&lt;/head&gt;&quot;</span>
           <span class="p">(</span><span class="nv">get-property</span> <span class="nv">channel</span> <span class="ss">:|title|</span><span class="p">))</span> <span class="c1">;取出channel的title</span>
</code></pre>
</div>


<p>最后组合一些接口，即可将整个过程联系起来，导出html文件:</p>

<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nv">cl-rss-test:test-rss-http</span> <span class="ss">:uri</span> <span class="s">&quot;/news/newshot/hotnewsrss.xml&quot;</span> 
                           <span class="ss">:host</span> <span class="s">&quot;cd.qq.com&quot;</span><span class="p">)</span>
</code></pre>
</div>


<p>然后在浏览器里查看，如图:</p>

<p><img src="http://kevinlynx.github.com/codemacro/assets/res/lisp_rss/screenshot.png" alt="sample" /></p>

<h2>其他</h2>

<p>当一些代码可以工作起来的时候，就可以着手测试这批代码。然后我就用这个工具测试我 Google
Reader里订阅的一些RSS。最大的问题，就是关于HTTP重定向的问题。</p>

<p>当服务器返回301或者302的错误信息时（HTTP回应），就标示请求的URI被移动到了其他地 方，客户端需要访问新的地址。这个其实查查
<a href="http://www.w3.org/Protocols/rfc2616/rfc2616.html">HTTP的规范</a>
就可以轻易解决。重定向时， 新的URI被指定在Response Header里的Location域，取出来发起第二次请求即可。</p>

<p><a href="http://www.cppblog.com/Files/kevinlynx/cl-rss.tar.gz">下载代码</a></p>

<h1>参考文档</h1>

<ul>
<li>HTTP规范:
<a href="http://www.w3.org/Protocols/rfc2616/rfc2616.html">http://www.w3.org/Protocols/rfc2616/rfc2616.html</a></li>
<li>RSS2.0规范:
<a href="http://feed2.w3.org/docs/rss2.html">http://feed2.w3.org/docs/rss2.html</a></li>
</ul>


<p>;;EOF;;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lisp一瞥：增强型变量Symbol]]></title>
    <link href="http://kevinlynx.github.com/codemacro/2011/03/21/lisp-symbol/"/>
    <updated>2011-03-21T00:00:00+08:00</updated>
    <id>http://kevinlynx.github.com/codemacro/2011/03/21/lisp-symbol</id>
    <content type="html"><![CDATA[<p>变量，是所有编程语言里都有的语法概念。在C/C++中，变量用于标示一个内存地址，而变
量名则在语法层面上代表这个地址。当链接器最终链接我们的程序时，就将这些名字替换
为实际的地址。在其他语言中，变量虽然或多或少有其他不同的含义，但也大致如此。</p>

<p>Lisp中的变量也差不多这样，但若将variable和Lisp中的 <strong>symbol</strong> 放在一起，则多少会 带来些困惑。</p>

<h2>Lisp中的“变量&#8221;</h2>

<p>很多教授Lisp的书中，大概会简单地告诉我们可以使用如下的方式定义一个全局变量 [1]_.</p>

<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nb">defparameter</span> <span class="vg">*var*</span> <span class="mi">1</span><span class="p">)</span>
</code></pre>
</div>


<p>如上代码，我们便定义了一个全局变量 <code>*var*</code> [2]_ ，它被初始化为数值1。同样，我们 还可以使用另一种基本相同的方式:</p>

<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nb">defvar</span> <span class="vg">*var*</span> <span class="mi">1</span><span class="p">)</span>
</code></pre>
</div>


<p>除了全局变量，我们还可以定义局部变量。但局部变量的定义稍显麻烦（却可能是另一种
设计考虑）。定义局部变量需要使用一些宏，或者特殊运算符，例如:</p>

<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">var</span> <span class="mi">1</span><span class="p">))</span>
  <span class="p">(</span><span class="nb">format</span> <span class="no">t</span> <span class="s">&quot;~a&quot;</span> <span class="nv">var</span><span class="p">))</span>
</code></pre>
</div>


<p>好了，就这些了。Lisp中关于变量的细节，也就这些。你甚至能用你在C/C++中的经验来窥
探一切。但是，我们很快就看到了很多困惑的地方。</p>

<p>我遇到的第一个困惑的地方来源于函数，那么等我讲讲函数再来分享下坎坷。</p>

<h2>Lisp中的函数</h2>

<p>Lisp中的函数绝对不复杂，你绝对不用担心我在忽悠你 [3]_ 。作为一门函数式语言，其首要
任务就是加强函数这个东西在整个语言里的功能。如果你喜欢广阅各种与你工作不相干的
技术，你肯定已经对很多函数式语言世界中的概念略有耳闻。例如闭包，以及first class type [4]_ 。</p>

<p>Lisp中的函数就是first class type。这什么意思呢？直白来说，
<strong>Lisp中的函数和变量 没什么区别，享有同等待遇</strong> 。进一步来说，变量fn的值可以是数值1，也可以是字符串
&#8220;hello&#8221;，甚至是某个函数。这其实就是C++程序员说的functor。</p>

<p>Lisp中定义函数非常简单:</p>

<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">add2</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span> 
  <span class="p">(</span><span class="nb">+</span> <span class="mi">2</span> <span class="nv">x</span><span class="p">))</span>
</code></pre>
</div>


<p>这样，我们就定义了一个名为add2，有1个参数，1个返回值的函数。要调用该函数时，只需 要 <code>(add2 2)</code>
即可。这简直和我们在Lisp中完成一个加法一模一样:<code>(+ 2 3)</code></p>

<p>Lisp作为一门函数式语言，其函数也能作为另一个函数的参数和返回值 [5]_</p>

<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">apply-fn</span> <span class="p">(</span><span class="nv">fn</span> <span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">funcall</span> <span class="nv">fn</span> <span class="nv">x</span><span class="p">))</span>
</code></pre>
</div>


<p>apply-fn函数第一个参数是一个函数，它使用funcall函数间接地调用fn指向的函数。作为
一个C++程序员，这简直太好理解了，这完全就是一个函数指针的语法糖嘛。于是，假设我 们要使用apply-fn来间接调用add2函数:</p>

<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nv">apply-fn</span> <span class="nv">add2</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">;; wrong </span>
</code></pre>
</div>


<p>可是这是不对的。我们需要通过另一个特殊操作符来完成这件事:</p>

<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nv">apply-fn</span> <span class="nf">#&#39;</span><span class="nv">add2</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">;; right</span>
</code></pre>
</div>


<p>#&#8217;操作符用于将add2对应的函数取出来，这么说当然不大准确。Again，作为一个C++程序员
，这简直就是个取地址操作符&amp;的语法糖嘛。好吧，这么理解起来似乎没问题了。</p>

<p>Lisp中能甚至能在任何地方定义一个函数，例如我们创建一个函数，该函数返回创建出来的 函数，这是一个典型的讲解什么是 <strong>闭包</strong>
的例子:</p>

<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">get-add-n</span> <span class="p">(</span><span class="nv">n</span><span class="p">)</span>
  <span class="nf">#&#39;</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span>
       <span class="p">(</span><span class="nb">+</span> <span class="nv">x</span> <span class="nv">n</span><span class="p">)))</span>
</code></pre>
</div>


<p>无论如何，get-add-n函数返回一个函数，该函数是add2函数的泛型实现。它可以将你传入
的参数加上n。这些代码里使用了lambda表达式。lambda表达式直白来说，就是创建一个字
面上的函数。这又是什么意思呢？就像我们在代码中写出2，写出&#8221;hello&#8221;一样，2就是个字
面上的数字，&#8221;hello&#8221;就是个字面上的字符串 [6]_ 。</p>

<p>那么，总而言之，通过lambda创建一个函数体，然后通过#&#8217;操作符即可得到一个函数，虽然 没有名字。有了以上知识后，Again
and again，作为一个C++程序员，很快我们就能得到一
个程序：定义变量，用变量去保存一个函数，然后通过这个变量来调用这个函数。这是多么
天经地义的事，就像之前那个通过参数调用其指向的函数一样:</p>

<div class="highlight"><pre><code class="cl"><span class="c1">;; wrong </span>
<span class="p">(</span><span class="nb">defvar</span> <span class="nv">fn</span> <span class="nf">#&#39;</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">x</span> <span class="mi">2</span><span class="p">)))</span>
<span class="p">(</span><span class="nv">fn</span> <span class="mi">3</span><span class="p">)</span>
</code></pre>
</div>


<p>这样的代码是不对的，错误发生于第二行，无论你使用的Lisp实现是哪种，大概会得到如下 的错误信息:</p>

<pre><code>"The function FN is undefined."
</code></pre>

<p>老实说，这已经算是多么有迹可循的错误提示了啊。将以上代码和之前的apply-fn对比，是
多么得神似啊，可惜就是错的。这是我们遇到的第一个理解偏差导致的问题。如果你还不深
入探究，你将会在这一块遇到更多麻烦。及时地拿出你的勇气，披荆斩棘，刨根究底，绝对 是学习编程的好品质。</p>

<h2>“万恶之源“：SYMBOL</h2>

<p>上文中提到的变量函数之类，之所以会在某些时候与我们的理解发生偏差，并且总是存在些
神秘的地方无法解释。这完全是因为我们理解得太片面导致。Lisp中的Symbol可以说就是某
个变量，或者某个函数，但这太片面。Lisp中的Symbol拥有更丰富的含义。</p>

<h3>Symbol的名字</h3>

<p>就像很多语言的变量、函数名一样，Lisp中的Symbol比其他语言在命名方面更自由：
<strong>只 要位于&#8217;|&#8217;字符之间的字符串，就表示一个合法的Symbol名。</strong> 我们可以使用函数
symbol-name来获取一个Symbol的名字，例如:</p>

<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nb">symbol-name</span> <span class="ss">&#39;|this is a symbol name|</span><span class="p">)</span>
</code></pre>
</div>


<pre><code>输出："this is a symbol name"
</code></pre>

<p>&#8216;(quote)操作符告诉Lisp不要对其修饰的东西进行求值(evaluate)。但假如没有这个操作符
会怎样呢？后面我们将看到会怎样。</p>

<h3>Symbol本质</h3>

<p><ANSI Common Lisp\>一书中有句话真正地揭示了Symbol的本质：
<strong>Symbols are real objects</strong>
。是的，Symbols是对象，这个对象就像我们理解的C++中的对象一样，它是一个
复合的数据结构。该数据结构里包含若干域，或者通俗而言：数据成员。借用<ANSI Common Lisp\>中的一图：</p>

<blockquote><p><img src="http://kevinlynx.github.com/codemacro/assets/res/lisp_symbol/symbol-obj.png" alt="image" /></p></blockquote>

<p>通过这幅图，可以揭开所有谜底。一个Symbol包含至少图中的几个域，例如Name、Value、
Function等。在Lisp中有很多函数来访问这些域，例如上文中使用到的symbol-name，这个
函数本质上就是取出一个Symbol的Name域。</p>

<h3>Symbol与Variable和Function的联系</h3>

<p>自然而然地，翻阅Lisp文档，我们会发现果然还有其他函数来访问Symbol的其他域，例如:</p>

<pre><code>symbol-function
symbol-value
symbol-package
symbol-plist
</code></pre>

<p>但是这些又与上文提到的变量和函数有什么联系呢？真相只有一个，
<strong>变量、函数粗略来 说就是Symbol的一个域，一个成员。变量对应Value域，函数对应Function域。一个Symbol 这些域有数据了，我们说它们发生了绑定(bind)。</strong>
而恰好，我们有几个函数可以用于判 定这些域是否被绑定了值:</p>

<pre><code>boundp ;判定Value域是否被绑定
fboundp;判定Function域是否被绑定
</code></pre>

<p>通过一些代码来回味以上结论:</p>

<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nb">defvar</span> <span class="vg">*var*</span> <span class="mi">1</span><span class="p">)</span>
<span class="p">(</span><span class="nb">boundp</span> <span class="ss">&#39;*var*</span><span class="p">)</span> <span class="c1">; 返回真</span>
<span class="p">(</span><span class="nb">fboundp</span> <span class="ss">&#39;*var*</span><span class="p">)</span> <span class="c1">; 返回假</span>
<span class="p">(</span><span class="nb">defun</span> <span class="vg">*var*</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span> <span class="nv">x</span><span class="p">)</span> <span class="c1">; 定义一个名为*var*的函数，返回值即为参数</span>
<span class="p">(</span><span class="nb">fboundp</span> <span class="ss">&#39;*var*</span><span class="p">)</span> <span class="c1">; 返回真</span>
</code></pre>
</div>


<p>上面的代码简直揭秘了若干惊天地泣鬼神的真相。首先，我们使用我们熟知的defvar定义了 一个名为 <code>*var*</code>
的变量，初值为1，然后使用boundp去判定 <code>*var*</code> 的Value域是否 发生了绑定。这其实是说：
<strong>原来定义变量就是定义了一个Symbol，给变量赋值，原来就 是给Symbol的Value域赋值！</strong></p>

<p><strong>其实，Lisp中所有这些符号，都是Symbol。</strong> 什么变量，什么函数，都是浮云。上面的
例子中，紧接着用fboundp判断Symbol <code>*var*</code> 的Function域是否绑定，这个时候为假。 然后我们定义了一个名为
<code>*var*</code> 的函数，之后再判断，则已然为真。这也是为什么， <strong>在Lisp中某个函数可以和某个变量同名的原因所在。</strong>
从这段代码中我们也可以看出 defvar/defun这些操作符、宏所做事情的本质。</p>

<h3>More More More</h3>

<p>事情就这样结束了？Of course not。还有很多上文提到的疑惑没有解决。首先，Symbol是
如此复杂，那么Lisp如何决定它在不同环境下的含义呢？Symbol虽然是个对象，但它并不像
C++中的对象一样，它出现时并不指代自己！不同应用环境下，它指代的东西也不一样。这 些指代主要包括变量和函数，意思是说：
<strong>Symbol出现时，要么指的是它的Value，要么是 它的Function。</strong> 这种背地里干的事情，也算是造成迷惑的一个原因。</p>

<p>当一个Symbol出现在一个List的第一个元素时，它被处理为函数。这么说有点迷惑人，因为
它带进了Lisp中代码和数据之间的模糊边界特性。简单来说，就是当Symbol出现在一个括号
表达式(s-expression)中第一个位置时，算是个函数，例如:</p>

<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nv">add2</span> <span class="mi">3</span><span class="p">)</span> <span class="c1">; add2位于第一个位置，被当作函数处理</span>
<span class="p">(</span><span class="vg">*var*</span> <span class="mi">3</span><span class="p">)</span> <span class="c1">; 这里*var*被当作函数调用，返回3</span>
</code></pre>
</div>


<p>除此之外，我能想到的其他大部分情况，一个Symbol都被指代为它的Value域，也就是被当 作变量，例如:</p>

<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="vg">*var*</span> <span class="vg">*var*</span><span class="p">)</span> <span class="c1">; 这是正确的语句，返回1</span>
</code></pre>
</div>


<p>这看起来是多么古怪的代码。但是运用我们上面说的结论，便可轻易解释：表达式中第一个 <code>*var*</code>
被当作函数处理，它需要一个参数；表达式第二部分的 <code>*var*</code> 被当作变量 处理，它的值为1，然后将其作为参数传入。</p>

<p>再来说说&#8217;(quote)操作符，这个操作符用于防止其操作数被求值。而当一个Symbol出现时，
它总是会被求值，所以，我们可以分析以下代码:</p>

<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nb">symbol-value</span> <span class="vg">*var*</span><span class="p">)</span> <span class="c1">; wrong</span>
</code></pre>
</div>


<p>这个代码并不正确，因为 <code>*var*</code> 总是会被求值，就像 <code>(*var* *var*)</code> 一样，第二 个 <code>*var*</code>
被求值，得到数字1。这里也会发生这种事情，那么最终就等同于:</p>

<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nb">symbol-value</span> <span class="mi">1</span><span class="p">)</span> <span class="c1">; wrong</span>
</code></pre>
</div>


<p>我们试图去取数字1的Value域，而数字1并不是一个Symbol。所以，我们需要quote运算符:</p>

<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nb">symbol-value</span> <span class="ss">&#39;*var*</span><span class="p">)</span> <span class="c1">; right</span>
</code></pre>
</div>


<p>这句代码是说，取Symbol <code>*var*</code> 本身的Value域！而不是其他什么地方。至此，我们 便可以分析以下复杂情况:</p>

<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nb">defvar</span> <span class="vg">*name*</span> <span class="s">&quot;kevin lynx&quot;</span><span class="p">)</span>
<span class="p">(</span><span class="nb">defvar</span> <span class="vg">*ref*</span> <span class="ss">&#39;*name*</span><span class="p">)</span> <span class="c1">; *ref*的Value保存的是另一个Symbol</span>
<span class="p">(</span><span class="nb">symbol-value</span> <span class="vg">*ref*</span><span class="p">)</span> <span class="c1">; 取*ref*的Value，得到*name*，再取*name*的Value</span>
</code></pre>
</div>


<p>现在，我们甚至能解释上文留下的一个问题:</p>

<div class="highlight"><pre><code class="cl"><span class="c1">;; wrong </span>
<span class="p">(</span><span class="nb">defvar</span> <span class="nv">fn</span> <span class="nf">#&#39;</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">x</span> <span class="mi">2</span><span class="p">)))</span>
<span class="p">(</span><span class="nv">fn</span> <span class="mi">3</span><span class="p">)</span>
</code></pre>
</div>


<p>给fn的Value赋值一个函数， <code>(fn 3)</code> 当一个Symbol作为函数使用时，也就是取其
Function域来做调用。但其Function域什么也没有，我们试图将一个Symbol的Value域当作
Function来使用。如何解决这个问题？想想，symbol-function可以取到一个Symbol的 Function域:</p>

<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nb">setf</span> <span class="p">(</span><span class="nb">symbol-function</span> <span class="ss">&#39;fn</span><span class="p">)</span> <span class="nf">#&#39;</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">x</span> <span class="mi">2</span><span class="p">)))</span>
<span class="p">(</span><span class="nv">fn</span> <span class="mi">3</span><span class="p">)</span>
</code></pre>
</div>


<p>通过显示地给fn的Function域赋值，而不是通过defvar隐式地对其Value域赋值，就可以使 <code>(fn 3)</code>
调用正确。还有另一个问题也能轻易解释:</p>

<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nv">apply-fn</span> <span class="nv">add2</span> <span class="mi">2</span><span class="p">)</span> <span class="c1">; wrong</span>
</code></pre>
</div>


<p>本意是想传入add2这个Symbol的function域，但是直接这样写的话，传入的其实是add2的 Value域 [7]_
，这当然是不正确的。对比正确的写法，我们甚至能猜测#&#8217;运算符就是一个
取Symbol的Function域的运算符。进一步，我们还可以给出另一种写法:</p>

<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nv">apply-fn</span> <span class="p">(</span><span class="nb">symbol-function</span> <span class="ss">&#39;add2</span><span class="p">)</span> <span class="mi">2</span><span class="p">)</span>
</code></pre>
</div>


<p>深入理解事情的背后，你会发现你能写出多么灵活的代码。</p>

<h2>END</h2>

<p>关于Symbol的内容还有更多，例如Package。正确理解这些内容以及他们之间的关系，有助 于更深刻地理解Lisp。</p>

<h2>注解</h2>

<ul>
<li>[1]  在Lisp中全局变量又被称为dynamic variables</li>
<li>[2]  Lisp中按照习惯通常在为全局变量命名时会加上星号，就像我们习惯使用g_一样</li>
<li>[3]  因为我确实在忽悠你</li>
<li>[4]  first class type，有人翻译为“一等公民”，我觉得压力巨大</li>
<li>[5]  即高阶函数</li>
<li>[6]  “字面“主要是针对这些信息会被词法分析程序直接处理</li>
<li>[7]  这可能导致更多的错误</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用lisp开发博客客户端]]></title>
    <link href="http://kevinlynx.github.com/codemacro/2011/03/13/lisp-writer/"/>
    <updated>2011-03-13T00:00:00+08:00</updated>
    <id>http://kevinlynx.github.com/codemacro/2011/03/13/lisp-writer</id>
    <content type="html"><![CDATA[<p>最近一直在学习Lisp这门语言。回头一看，基本上接近1个月了。刚开始接触Lisp是因为看
了&lt;Lisp本质&gt;，然后我发现有很多人宗教般地忠诚这门语言，于是就来了兴趣。</p>

<p><img src="http://kevinlynx.github.com/codemacro/assets/res/lisp_writer/lisp_believer.png" alt="lisp_believer" /></p>

<p>当然并不是每次因为某篇写得很geek技术文章就去学习某个新的技术点。一个月时间对我来
说还是很珍贵了。但是Lisp绝对是大部分程序员都值得一学的语言（就像Haskell一样）。
我能给出的简单理由包括：</p>

<ul>
<li>大部分程序员只会命令式语言（C/C++/C Like etc)，缺乏函数式语言解决编程问题的思
想（当然Lisp不是纯函数式)</li>
<li>Lisp是仅次于Fortran的古老语言，很多优秀的语言设计思想在现代的一些语言里都找得
到</li>
<li>装B党必备</li>
</ul>


<p>另一方面，结合我一个月以来的读书和两个练习工程的实践经历，我觉得也有些理由值得你
不去学习Lisp：</p>

<ul>
<li>你会Haskell或者其他函数式语言</li>
<li>我目前还是觉得Lisp学习曲线高(大概是因为我读到的书都在应用语法层兜圈子，事实上
Lisp的语法之统一，全特么的是s-expression)，你不愿意花费这些成本</li>
<li>you are too old bo to be a B</li>
</ul>


<h2>关于这篇文档</h2>

<p>这篇博客我使用reStructuredText格式编写，然后用docutls导出为html，再然后使用这回
用lisp开发的基于metaweblog API的博客客户端，自动发布到CPPBLOG。</p>

<h2>他们怎么说Lisp</h2>

<p>我就摘录些书上的观点(历史)：</p>

<ul>
<li>1958年，John McCarthy和他的学生搞出了Lisp，包括其第一个实现，最初貌似也是以一
篇论文起头</li>
<li>Lisp可以让你做其他语言里无法做的事情(&lt;ANSI common Lisp&gt;)</li>
<li>大部分编程语言只会告诉你不能怎样做，这限制了你解决问题的思路，Lisp not (&lt;ANSI
Common Lisp&gt;)</li>
<li>Lisp让你以Lisp的思维思考问题，换到其他语言你会说：为什么X语言就不支持这个特性
呢(Once you&#8217;ve leanred Lisp, you&#8217;ll even dream in Lisp) (&lt;Land Of Lisp&gt;)</li>
<li>Lisp代码更清晰地体现你的想法(&lt;Practical Common Lisp&gt;)</li>
</ul>


<h2>And my opinion</h2>

<p>我可还没到把Lisp捧上天的地步。如果Lisp如此之好，为什么用的人不多？&lt;Land Of Lisp&gt;
里作者恰好对这个问题做了回答(bla bla bla，懒得细读)。</p>

<ul>
<li>Lisp也是一门杂和型风格的语言，函数式、命令式、面向对象，以及最被人吹捧的宏编程
&#8211;程序自己写自己</li>
<li>Lisp的语句全部以(xxx xxx)的形式出现，被称为s-expression，我看称为括号表达式还
差不多</li>
<li>Lisp每条语句都有返回值，没基础过函数式编程的同学，if语句也是有返回值的</li>
<li>函数式编程语言的一个重要特性就是闭包(closure)，这个东西用来避免全局变量实在太
geek了</li>
</ul>


<h2>开始学习Lisp</h2>

<p>Lisp不像有些语言，有个直接的机构来维护。感觉它更像C/C++一样，只有个标准，然后有
若干编译器（解释器）实现。Lisp在几十年的发展中，产生了很多种方言。方言也就是形变
神不变的语言变种，本文说的Lisp均指Lisp的方言Common Lisp。另一个比较有名的方言是
Scheme，关于各个方言的特点，&lt;Land Of Lisp&gt;里也给了一个图片：</p>

<p><img src="http://kevinlynx.github.com/codemacro/assets/res/lisp_writer/dialect.png" alt="dialect" /></p>

<p>其中，最左边那只wolf就是Common Lisp，右边那只sheep就是Scheme。</p>

<p>要学习Lisp，首先就是选择方言。然后最重要的就是选择一个编译器实现。世界上知名的有
十几种实现（也许更多）。一些商业版本非常强大，甚至能编译出很小的本地代码执行文件
，不过价格也不菲。当然也有很多开源免费的实现，例如CLISP、SBCL。我选用的是SBCL。</p>

<p>SBCL交互式命令行不支持括号匹配，甚至没有输入历史。要实现这两个功能，可以装一个
lisp工具：linedit。在lisp的世界中，要获得一个lisp的库实在不是件方便的事。尤其是
这些免费的编译器实现，并不像有些语言一样，直接随编译器带个几十M的库。</p>

<p>然后就有了quicklisp这个工具。该工具就像Ubuntu系统里的软件管理器一样，你可以在
lisp里直接获取某个库。quicklisp检查该库是否存在，不存在直接从它的服务器上下载人
然后自动安装。</p>

<p>此外，在lisp的世界里，写出来的程序不再是跨OS。OS的差异由编译器实现来解决。但是，
写lisp程序却需要考虑跨编译器实现（egg hurt）。这也是个无比伤神的事，比跨OS更伤
神。因为OS就那么几个，但lisp的编译器实现，流行的也有好几个。</p>

<p>lisp的世界里，工程组织也有特殊的一套，就像makefile一样，这就是asdf。</p>

<h2>博客客户端如何实现</h2>

<p>像我们这种基本没接触过Web开发的人，可能完全没有思路去实现一个博客客户端。事实上
实现起来非常简单。</p>

<p>使用过其他博客客户端（例如Windows Live writer）的人肯定知道metaweblog API，在配
置客户端的时候需要填入。例如CPPBLOG的这个地址就是
http://www.cppblog.com/kevinlynx/services/metaweblog.aspx。这个页面展示了一些API
说明。这些API就是博客客户端和服务器进行操作通信的接口。意思是说，服务器端提供这
这些接口，我们的客户端调用这些接口即可。例如:</p>

<pre><code>blogger.deletePost，调用该接口即可删除一篇博客文章
</code></pre>

<p>但是客户端如何调用到这个接口呢？这需要通过一种新的技术（或者说标准），即 <strong>xml rpc</strong>
。rpc大家应该清楚，xml rpc其实说白了， <strong>就是把接口调用的细则塞进</strong> <strong>http
请求发给web服务器，服务器接收请求完成操作后再把结果以http回应的形式丢给客户端，
即完成了一次接口调用</strong> 。</p>

<p>至于http请求回应的细则就不提了，无非就是一些特殊格式的数据，通过tcp连接与服务器
交互这些数据。</p>

<p>所以，基本上，整个过程还是非常简单。如何来将调用细节塞进http请求，则是以xml rpc
标准来做，其格式正好是xml格式。举个例子吧:</p>

<div class="highlight"><pre><code class="xml"><span class="cp">&lt;?xml version=&#39;1.0&#39;?&gt;</span>
<span class="nt">&lt;methodCall&gt;</span>
    <span class="nt">&lt;methodName&gt;</span>title_or_id<span class="nt">&lt;/methodName&gt;</span>
        <span class="nt">&lt;params&gt;</span>
        <span class="nt">&lt;/params&gt;</span>
<span class="nt">&lt;/methodCall&gt;</span>
</code></pre>
</div>


<p>当然这部分数据之前就是若干http请求的数据。服务器回应也是以xml格式组织:</p>

<div class="highlight"><pre><code class="xml"><span class="cp">&lt;?xml version=&#39;1.0&#39;?&gt;</span>
<span class="nt">&lt;methodResponse&gt;</span>
    <span class="nt">&lt;params&gt;</span>
        <span class="nt">&lt;param&gt;</span>
            <span class="nt">&lt;value&gt;&lt;string&gt;</span>Welcome to Zope.org<span class="nt">&lt;/string&gt;&lt;/value&gt;</span>
        <span class="nt">&lt;/param&gt;</span>
    <span class="nt">&lt;/params&gt;</span>
<span class="nt">&lt;/methodResponse&gt;</span>
</code></pre>
</div>


<p>我们的博客客户端所要做的，就是把这些博客发布相关的操作封装起来提供给使用者。底层
实现主要包括http请求、xml-rpc的组织等。何况，这两部分在各个语言里都有大量的库存
在，lisp自然也有。</p>

<p>我这里直接选取了lisp的一个xml-rpc库：s-xml-rpc，基本上百来行代码就可以把各个功
能跑一遍。例如以下lisp代码就实现了通过s-xml-rpc删除CPPBLOG的一篇文章:</p>

<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">delete-post</span> <span class="p">(</span><span class="nv">postid</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">rpc-call</span> 
    <span class="s">&quot;blogger.deletePost&quot;</span>
    <span class="nv">postid</span>
    <span class="s">&quot;kevinlynx&quot;</span>
    <span class="s">&quot;password&quot;</span>
    <span class="no">t</span><span class="p">))</span>
</code></pre>
</div>


<p>发布博客也很简单，根据metaweblog API接口的说明，发布博客时需要填充一个结构体。但
主要涉及到的数据仅包括：文章内容、文章标题、文章分类（可选）:</p>

<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">new-post</span> <span class="p">(</span><span class="nv">title</span> <span class="nv">context</span> <span class="k">&amp;optional</span> <span class="p">(</span><span class="nv">cates</span><span class="p">))</span>
  <span class="p">(</span><span class="nv">rpc-call</span> 
    <span class="s">&quot;metaWeblog.newPost&quot;</span>
    <span class="s">&quot;&quot;</span>
    <span class="s">&quot;kevinlynx&quot;</span>
    <span class="s">&quot;password&quot;</span>
    <span class="p">(</span><span class="nv">new-post-struct</span> <span class="nv">title</span> <span class="nv">context</span> <span class="nv">cates</span><span class="p">)</span>
    <span class="no">t</span><span class="p">))</span>
</code></pre>
</div>


<p>值得注意的是，如果文章中有贴图，则需要事先将图片文件上传到服务器。CPPBLOG的
metaweblog API里恰有API提供:</p>

<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">new-media-object</span> <span class="p">(</span><span class="nv">filename</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">rpc-call</span> 
    <span class="s">&quot;metaWeblog.newMediaObject&quot;</span>
    <span class="s">&quot;&quot;</span>
    <span class="s">&quot;kevinlynx&quot;</span>
    <span class="s">&quot;password&quot;</span>
    <span class="p">(</span><span class="nv">new-media-object-struct</span> <span class="nv">filename</span><span class="p">)))</span>
</code></pre>
</div>


<p>该函数读入图片文件，然后调用metaWeblog.newMediaObject接口，即可完成上传。上传成
功后，服务器会返回该图片的URL。然后在我们的文章中就可以使用该图片了。</p>

<h2>完整实现方案</h2>

<p>仅仅将metaweblog的一些接口做封装，对于一个可以使用的博客客户端来说还远远不够。大
部分同类工具都有一个友好的GUI编辑界面。我并不打算弄一个编辑界面出来，吃力不讨好
的事情。</p>

<p>我的打算是先用其他工具对文章做排版处理，最后导出为html格式。因为CPPBLOG支持直接
发布一个html文件。然后在用这个lisp工具将整个文件作为博客文章内容发布。</p>

<p>恰好公司最近打算用reStructureText(rst)格式来编辑文档，作为熟悉手段，我决定拿这个
来练手。rst格式非常简单，同wiki命令很相似。在vim里编辑该文件非常合适，因为默认支
持。见图:</p>

<p><img src="http://kevinlynx.github.com/codemacro/assets/res/lisp_writer/rst.png" alt="rst_sample" /></p>

<p>由图即可看出，rst是一种半所见即所得的格式。即：它遵循你在编辑器里的排版，同时也
通过一些tag（例如image）来控制更丰富的输出。</p>

<p>rst有很多前端工具，可以将rst文件输出，例如rst2html.py就可以输出为html。好吧，最
最终我们得到了html格式的博客文章。</p>

<p>但是如果文章中出现了图片，而图片基本上在本地，转成html后也是相对路径。我需要我的
lisp writer(cl-writer)能自动扫描文章，发现有图片的地方，就自动将图片上传。最恶心
的是上传后还得替换图片引用路径。这个工作可以在rst格式上做，也可以在结果格式html
上做。通过xml解析库解析html比直接解析rst格式更简单，并且在扩展性上更好。</p>

<p>最终这个html中图片路径替换工作只消耗了不到100行lisp代码。这在很大程度上也依赖于
s-xml库的接口设计。</p>

<p>最终封装好的发布接口如下，从这里也可以看出，函数式语言锻炼我们写出功能单一代码度
短小的接口:</p>

<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nb">defun</span> <span class="nv">writer-post-new</span> <span class="p">(</span><span class="nv">post-file</span> <span class="k">&amp;key</span> <span class="p">(</span><span class="nv">u</span> <span class="p">(</span><span class="nv">get-default-user</span><span class="p">))(</span><span class="nv">cates</span><span class="p">))</span>
  <span class="p">(</span><span class="nv">read-post-file</span> <span class="nv">u</span> <span class="nv">post-file</span> <span class="nv">context</span> <span class="nv">title</span>
                  <span class="p">(</span><span class="nv">new-post</span> <span class="nv">u</span> <span class="nv">title</span> <span class="nv">context</span> <span class="nv">cates</span><span class="p">)))</span>
</code></pre>
</div>


<h2>END</h2>

<p>别指望我发布的代码能够让你一键在你的博客上留下&#8221;this is a test&#8221;，你甚至别指望它能
能够工作。但如果你本来就是一个资深的lisper，或者虽然不是lisper但却执意想看看结果
。这里我就简要说说如何让这些代码欢乐起来:</p>

<ul>
<li>OS Ubuntu10.04，下载安装SBCL，不会有问题；</li>
<li>下载安装quicklisp，官方文档hand by hand，简单不会有问题；</li>
<li>SBCL交互环境中使用quicklisp安装s-xml-rpc:</li>
</ul>


<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nv">ql:quickload</span> <span class="s">&quot;s-xml-rpc&quot;</span><span class="p">)</span> 
</code></pre>
</div>


<ul>
<li>装载我的代码:</li>
</ul>


<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nv">asdf:load-system</span> <span class="ss">:cl-writer</span><span class="p">)</span>
</code></pre>
</div>


<ul>
<li>在home下添加配置文件.cl-writer.lisp，配置你博客信息，例如:</li>
</ul>


<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nb">in-package</span> <span class="nv">cl-writer</span><span class="p">)</span>
<span class="p">(</span><span class="nb">setf</span> <span class="vg">*default-user*</span> <span class="p">(</span><span class="nv">make-cppblog-user</span> <span class="s">&quot;账户名&quot;</span> <span class="s">&quot;密码&quot;</span><span class="p">))</span>
</code></pre>
</div>


<ul>
<li>SBCL交互环境下测试:</li>
</ul>


<div class="highlight"><pre><code class="cl"><span class="p">(</span><span class="nb">in-package</span> <span class="nv">cl-writer</span><span class="p">)</span>
<span class="p">(</span><span class="nv">new-post</span> <span class="p">(</span><span class="nv">get-default-user</span><span class="p">)</span> <span class="s">&quot;this is a test&quot;</span> <span class="s">&quot;title&quot;</span><span class="p">)</span>
</code></pre>
</div>


<p><a href="http://www.cppblog.com/Files/kevinlynx/cl-writer.tar.gz">下载代码</a></p>

<p>最后，终于敲完这篇文章，我需要通过以下步骤来发表它:</p>

<pre><code>in shell:

rst2html.py lisp_xml_rpc.rst lisp_xml_rpc.html

in SBCL:

(writer-post-new "lisp_xml_rpc.html")
</code></pre>

<p>EOF</p>
]]></content>
  </entry>
  
</feed>
